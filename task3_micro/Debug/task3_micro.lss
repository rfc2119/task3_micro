
task3_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000646  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000006ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089e  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000734  00000000  00000000  0000101a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038b  00000000  00000000  0000174e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00001adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003db  00000000  00000000  00001b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e8  00000000  00000000  00001f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 21 03 	jmp	0x642	; 0x642 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
void adc_init(int s0,int s1)
{
	// AREF = Avcc .. Internal
	//s0 = 1 s1 = 1 Internal reference 1.1
	//s0 = 0 s1 = 0 turn off internal reference
	ADMUX = (s0<<REFS0);//if s0 is 1 set refs0 with 1
  90:	82 95       	swap	r24
  92:	88 0f       	add	r24, r24
  94:	88 0f       	add	r24, r24
  96:	80 7c       	andi	r24, 0xC0	; 192
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 83       	st	Z, r24
	ADMUX |= (s1<<REFS1);//if s1 is 1 set refs1 with 1 
  9e:	80 81       	ld	r24, Z
  a0:	76 95       	lsr	r23
  a2:	76 2f       	mov	r23, r22
  a4:	66 27       	eor	r22, r22
  a6:	77 95       	ror	r23
  a8:	67 95       	ror	r22
  aa:	68 2b       	or	r22, r24
  ac:	60 83       	st	Z, r22
	// ADC Enable and prescaler of 8
	// 1000000 / 8 = 125000
	ADCSRA = (1<<ADEN)| (1<<ADPS1)|(1<<ADPS0);
  ae:	83 e8       	ldi	r24, 0x83	; 131
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	08 95       	ret

000000b6 <adc_read>:
}

unsigned int adc_read(unsigned char ch)
{
	// select the corresponding channel 0~7
	ADMUX |= ch;
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
	// start single conversion, by writing ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	// wait for conversion to complete, ADSC becomes
	//’0? again, till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <adc_read+0x14>
	
	 //wait for conversion to finish
	// while(!(ADCSRA & (1 << ADIF)));

	 //ADCSRA |= (1 << ADIF); //reset as required
	return ADC;
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d8:	08 95       	ret

000000da <main>:
void (*resetptr)( void ) = 0x0000;

int main(void)
{
	/*configurations*/
	SET_BIT_IO_RNG(B, PORTB0, PORTB7, OUT);	//output to BCD drivers
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
	SET_BIT_IO_RNG(C, PORTC0, PORTC1, IN);	//ADC{0,1}
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	8c 7f       	andi	r24, 0xFC	; 252
  e4:	87 b9       	out	0x07, r24	; 7
	
	SET_BIT_IO(D, INT0, IN);		//INT0
  e6:	50 98       	cbi	0x0a, 0	; 10
	SET_BIT(PORTD, PORTD2);			//activate pull-up res for INT0
  e8:	5a 9a       	sbi	0x0b, 2	; 11
	SET_BIT_IO(D, BUZZER, OUT);		//activate buzzer
  ea:	50 9a       	sbi	0x0a, 0	; 10
	
	EICRA |= (1 << ISC01);  // set INT0 to trigger on falling edge change
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); // Turns on INT0 
  f6:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // turn on interrupts
  f8:	78 94       	sei

	/*initializations */
	float analog, digital;
	div_t result;
	mode = MODE_TEMPERATURE_SENSOR;
  fa:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <mode>
	//mode = MODE_POT;
	adc_init(1,0);		//5V for all modes
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
	for (;;)
	{
		if (READ_BIT(mode, 0) == MODE_POT){
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <mode>
 10e:	80 ff       	sbrs	r24, 0
 110:	36 c0       	rjmp	.+108    	; 0x17e <main+0xa4>
			analog = reading * v_ref / ((1 << 11) - 1)
			display integer part
			display fraction part
			*/
			
			digital = adc_read(MODE_POT);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = digital * 5 / ((1 << 10) -1 );	//TODO: 1<<10 - 1 is ? (hint: adc bits)
 118:	bc 01       	movw	r22, r24
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__floatunsisf>
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	40 ea       	ldi	r20, 0xA0	; 160
 128:	50 e4       	ldi	r21, 0x40	; 64
 12a:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 ec       	ldi	r19, 0xC0	; 192
 132:	4f e7       	ldi	r20, 0x7F	; 127
 134:	54 e4       	ldi	r21, 0x44	; 68
 136:	0e 94 55 01 	call	0x2aa	; 0x2aa <__divsf3>
 13a:	6b 01       	movw	r12, r22
 13c:	7c 01       	movw	r14, r24
			result = div(analog*10, 10); 
 13e:	20 e0       	ldi	r18, 0x00	; 0
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	40 e2       	ldi	r20, 0x20	; 32
 144:	51 e4       	ldi	r21, 0x41	; 65
 146:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 14a:	0e 94 c7 01 	call	0x38e	; 0x38e <__fixsfsi>
 14e:	dc 01       	movw	r26, r24
 150:	cb 01       	movw	r24, r22
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 2d 01 	call	0x25a	; 0x25a <__divmodhi4>
 15a:	c8 2f       	mov	r28, r24
 15c:	d9 2f       	mov	r29, r25
			
			// TODO: improve output operation to BCD drivers
			PORTB = ((int)analog & 0x0F) << PORTB0;//display digit part
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	0e 94 c7 01 	call	0x38e	; 0x38e <__fixsfsi>
 166:	6f 70       	andi	r22, 0x0F	; 15
 168:	65 b9       	out	0x05, r22	; 5
			PORTB |= (result.rem & 0x0F) << PORTB4;	//display fraction part
 16a:	85 b1       	in	r24, 0x05	; 5
 16c:	c2 95       	swap	r28
 16e:	d2 95       	swap	r29
 170:	d0 7f       	andi	r29, 0xF0	; 240
 172:	dc 27       	eor	r29, r28
 174:	c0 7f       	andi	r28, 0xF0	; 240
 176:	dc 27       	eor	r29, r28
 178:	c8 2b       	or	r28, r24
 17a:	c5 b9       	out	0x05, r28	; 5
 17c:	c6 cf       	rjmp	.-116    	; 0x10a <main+0x30>
			read the lm sensor
			analog = reading * v_ref / ((1 << 11) - 1)
			analog *= 100 (hint: 10mV/C)
			if (analog > 60) BUZZ! display 0xffC
			*/
			digital = adc_read(MODE_TEMPERATURE_SENSOR);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = (digital * 5) / ((1 << 10) - 1);
 184:	bc 01       	movw	r22, r24
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <__floatunsisf>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 ea       	ldi	r20, 0xA0	; 160
 194:	50 e4       	ldi	r21, 0x40	; 64
 196:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 19a:	20 e0       	ldi	r18, 0x00	; 0
 19c:	30 ec       	ldi	r19, 0xC0	; 192
 19e:	4f e7       	ldi	r20, 0x7F	; 127
 1a0:	54 e4       	ldi	r21, 0x44	; 68
 1a2:	0e 94 55 01 	call	0x2aa	; 0x2aa <__divsf3>
			analog *= 100;//TODO: clarify the magic 100 (hint: 10mv/C)
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	48 ec       	ldi	r20, 0xC8	; 200
 1ac:	52 e4       	ldi	r21, 0x42	; 66
 1ae:	0e 94 90 02 	call	0x520	; 0x520 <__mulsf3>
 1b2:	6b 01       	movw	r12, r22
 1b4:	7c 01       	movw	r14, r24
			
			//buzzer!
			(analog > 60 ) ? SET_BIT(PORTD, BUZZER) :RESET_BIT(PORTD, BUZZER); 
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e7       	ldi	r20, 0x70	; 112
 1bc:	52 e4       	ldi	r21, 0x42	; 66
 1be:	0e 94 8b 02 	call	0x516	; 0x516 <__gesf2>
 1c2:	18 16       	cp	r1, r24
 1c4:	14 f4       	brge	.+4      	; 0x1ca <main+0xf0>
 1c6:	58 9a       	sbi	0x0b, 0	; 11
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <main+0xf2>
 1ca:	58 98       	cbi	0x0b, 0	; 11
			
			//SET_BIT_RNG(PORTB, PORTB0, PORTB7); //0xff, for debug
			result = div((int)analog, 10);
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	0e 94 c7 01 	call	0x38e	; 0x38e <__fixsfsi>
 1d4:	dc 01       	movw	r26, r24
 1d6:	cb 01       	movw	r24, r22
 1d8:	6a e0       	ldi	r22, 0x0A	; 10
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	0e 94 2d 01 	call	0x25a	; 0x25a <__divmodhi4>
 1e0:	28 2f       	mov	r18, r24
 1e2:	39 2f       	mov	r19, r25
			PORTB = (result.quot & 0x0F) << PORTB0;//display tens part
 1e4:	6f 70       	andi	r22, 0x0F	; 15
 1e6:	65 b9       	out	0x05, r22	; 5
			PORTB |= (result.rem & 0x0F) << PORTB4;	//display units part
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	22 95       	swap	r18
 1ec:	32 95       	swap	r19
 1ee:	30 7f       	andi	r19, 0xF0	; 240
 1f0:	32 27       	eor	r19, r18
 1f2:	20 7f       	andi	r18, 0xF0	; 240
 1f4:	32 27       	eor	r19, r18
 1f6:	28 2b       	or	r18, r24
 1f8:	25 b9       	out	0x05, r18	; 5
 1fa:	87 cf       	rjmp	.-242    	; 0x10a <main+0x30>

000001fc <__vector_1>:
	}
	return -1;
}

ISR (INT0_vect) 
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	4f 93       	push	r20
 20c:	5f 93       	push	r21
 20e:	6f 93       	push	r22
 210:	7f 93       	push	r23
 212:	8f 93       	push	r24
 214:	9f 93       	push	r25
 216:	af 93       	push	r26
 218:	bf 93       	push	r27
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
	/*switches modes and reset display*/
	TOGGLE_BIT(mode, 0);
 21e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <mode>
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	89 27       	eor	r24, r25
 226:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <mode>
	if(mode == MODE_TEMPERATURE_SENSOR){resetptr();};
 22a:	81 11       	cpse	r24, r1
 22c:	05 c0       	rjmp	.+10     	; 0x238 <__vector_1+0x3c>
 22e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 232:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 236:	09 95       	icall
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__divmodhi4>:
 25a:	97 fb       	bst	r25, 7
 25c:	07 2e       	mov	r0, r23
 25e:	16 f4       	brtc	.+4      	; 0x264 <__divmodhi4+0xa>
 260:	00 94       	com	r0
 262:	07 d0       	rcall	.+14     	; 0x272 <__divmodhi4_neg1>
 264:	77 fd       	sbrc	r23, 7
 266:	09 d0       	rcall	.+18     	; 0x27a <__divmodhi4_neg2>
 268:	0e 94 41 01 	call	0x282	; 0x282 <__udivmodhi4>
 26c:	07 fc       	sbrc	r0, 7
 26e:	05 d0       	rcall	.+10     	; 0x27a <__divmodhi4_neg2>
 270:	3e f4       	brtc	.+14     	; 0x280 <__divmodhi4_exit>

00000272 <__divmodhi4_neg1>:
 272:	90 95       	com	r25
 274:	81 95       	neg	r24
 276:	9f 4f       	sbci	r25, 0xFF	; 255
 278:	08 95       	ret

0000027a <__divmodhi4_neg2>:
 27a:	70 95       	com	r23
 27c:	61 95       	neg	r22
 27e:	7f 4f       	sbci	r23, 0xFF	; 255

00000280 <__divmodhi4_exit>:
 280:	08 95       	ret

00000282 <__udivmodhi4>:
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	51 e1       	ldi	r21, 0x11	; 17
 288:	07 c0       	rjmp	.+14     	; 0x298 <__udivmodhi4_ep>

0000028a <__udivmodhi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	a6 17       	cp	r26, r22
 290:	b7 07       	cpc	r27, r23
 292:	10 f0       	brcs	.+4      	; 0x298 <__udivmodhi4_ep>
 294:	a6 1b       	sub	r26, r22
 296:	b7 0b       	sbc	r27, r23

00000298 <__udivmodhi4_ep>:
 298:	88 1f       	adc	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	5a 95       	dec	r21
 29e:	a9 f7       	brne	.-22     	; 0x28a <__udivmodhi4_loop>
 2a0:	80 95       	com	r24
 2a2:	90 95       	com	r25
 2a4:	bc 01       	movw	r22, r24
 2a6:	cd 01       	movw	r24, r26
 2a8:	08 95       	ret

000002aa <__divsf3>:
 2aa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <__divsf3x>
 2ae:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_round>
 2b2:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscB>
 2b6:	58 f0       	brcs	.+22     	; 0x2ce <__divsf3+0x24>
 2b8:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscA>
 2bc:	40 f0       	brcs	.+16     	; 0x2ce <__divsf3+0x24>
 2be:	29 f4       	brne	.+10     	; 0x2ca <__divsf3+0x20>
 2c0:	5f 3f       	cpi	r21, 0xFF	; 255
 2c2:	29 f0       	breq	.+10     	; 0x2ce <__divsf3+0x24>
 2c4:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 2c8:	51 11       	cpse	r21, r1
 2ca:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>
 2ce:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_nan>

000002d2 <__divsf3x>:
 2d2:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_split3>
 2d6:	68 f3       	brcs	.-38     	; 0x2b2 <__divsf3+0x8>

000002d8 <__divsf3_pse>:
 2d8:	99 23       	and	r25, r25
 2da:	b1 f3       	breq	.-20     	; 0x2c8 <__divsf3+0x1e>
 2dc:	55 23       	and	r21, r21
 2de:	91 f3       	breq	.-28     	; 0x2c4 <__divsf3+0x1a>
 2e0:	95 1b       	sub	r25, r21
 2e2:	55 0b       	sbc	r21, r21
 2e4:	bb 27       	eor	r27, r27
 2e6:	aa 27       	eor	r26, r26
 2e8:	62 17       	cp	r22, r18
 2ea:	73 07       	cpc	r23, r19
 2ec:	84 07       	cpc	r24, r20
 2ee:	38 f0       	brcs	.+14     	; 0x2fe <__divsf3_pse+0x26>
 2f0:	9f 5f       	subi	r25, 0xFF	; 255
 2f2:	5f 4f       	sbci	r21, 0xFF	; 255
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	44 1f       	adc	r20, r20
 2fa:	aa 1f       	adc	r26, r26
 2fc:	a9 f3       	breq	.-22     	; 0x2e8 <__divsf3_pse+0x10>
 2fe:	35 d0       	rcall	.+106    	; 0x36a <__divsf3_pse+0x92>
 300:	0e 2e       	mov	r0, r30
 302:	3a f0       	brmi	.+14     	; 0x312 <__divsf3_pse+0x3a>
 304:	e0 e8       	ldi	r30, 0x80	; 128
 306:	32 d0       	rcall	.+100    	; 0x36c <__divsf3_pse+0x94>
 308:	91 50       	subi	r25, 0x01	; 1
 30a:	50 40       	sbci	r21, 0x00	; 0
 30c:	e6 95       	lsr	r30
 30e:	00 1c       	adc	r0, r0
 310:	ca f7       	brpl	.-14     	; 0x304 <__divsf3_pse+0x2c>
 312:	2b d0       	rcall	.+86     	; 0x36a <__divsf3_pse+0x92>
 314:	fe 2f       	mov	r31, r30
 316:	29 d0       	rcall	.+82     	; 0x36a <__divsf3_pse+0x92>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	bb 1f       	adc	r27, r27
 320:	26 17       	cp	r18, r22
 322:	37 07       	cpc	r19, r23
 324:	48 07       	cpc	r20, r24
 326:	ab 07       	cpc	r26, r27
 328:	b0 e8       	ldi	r27, 0x80	; 128
 32a:	09 f0       	breq	.+2      	; 0x32e <__divsf3_pse+0x56>
 32c:	bb 0b       	sbc	r27, r27
 32e:	80 2d       	mov	r24, r0
 330:	bf 01       	movw	r22, r30
 332:	ff 27       	eor	r31, r31
 334:	93 58       	subi	r25, 0x83	; 131
 336:	5f 4f       	sbci	r21, 0xFF	; 255
 338:	3a f0       	brmi	.+14     	; 0x348 <__divsf3_pse+0x70>
 33a:	9e 3f       	cpi	r25, 0xFE	; 254
 33c:	51 05       	cpc	r21, r1
 33e:	78 f0       	brcs	.+30     	; 0x35e <__divsf3_pse+0x86>
 340:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 344:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>
 348:	5f 3f       	cpi	r21, 0xFF	; 255
 34a:	e4 f3       	brlt	.-8      	; 0x344 <__divsf3_pse+0x6c>
 34c:	98 3e       	cpi	r25, 0xE8	; 232
 34e:	d4 f3       	brlt	.-12     	; 0x344 <__divsf3_pse+0x6c>
 350:	86 95       	lsr	r24
 352:	77 95       	ror	r23
 354:	67 95       	ror	r22
 356:	b7 95       	ror	r27
 358:	f7 95       	ror	r31
 35a:	9f 5f       	subi	r25, 0xFF	; 255
 35c:	c9 f7       	brne	.-14     	; 0x350 <__divsf3_pse+0x78>
 35e:	88 0f       	add	r24, r24
 360:	91 1d       	adc	r25, r1
 362:	96 95       	lsr	r25
 364:	87 95       	ror	r24
 366:	97 f9       	bld	r25, 7
 368:	08 95       	ret
 36a:	e1 e0       	ldi	r30, 0x01	; 1
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	88 1f       	adc	r24, r24
 372:	bb 1f       	adc	r27, r27
 374:	62 17       	cp	r22, r18
 376:	73 07       	cpc	r23, r19
 378:	84 07       	cpc	r24, r20
 37a:	ba 07       	cpc	r27, r26
 37c:	20 f0       	brcs	.+8      	; 0x386 <__divsf3_pse+0xae>
 37e:	62 1b       	sub	r22, r18
 380:	73 0b       	sbc	r23, r19
 382:	84 0b       	sbc	r24, r20
 384:	ba 0b       	sbc	r27, r26
 386:	ee 1f       	adc	r30, r30
 388:	88 f7       	brcc	.-30     	; 0x36c <__divsf3_pse+0x94>
 38a:	e0 95       	com	r30
 38c:	08 95       	ret

0000038e <__fixsfsi>:
 38e:	0e 94 ce 01 	call	0x39c	; 0x39c <__fixunssfsi>
 392:	68 94       	set
 394:	b1 11       	cpse	r27, r1
 396:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>
 39a:	08 95       	ret

0000039c <__fixunssfsi>:
 39c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__fp_splitA>
 3a0:	88 f0       	brcs	.+34     	; 0x3c4 <__fixunssfsi+0x28>
 3a2:	9f 57       	subi	r25, 0x7F	; 127
 3a4:	98 f0       	brcs	.+38     	; 0x3cc <__fixunssfsi+0x30>
 3a6:	b9 2f       	mov	r27, r25
 3a8:	99 27       	eor	r25, r25
 3aa:	b7 51       	subi	r27, 0x17	; 23
 3ac:	b0 f0       	brcs	.+44     	; 0x3da <__fixunssfsi+0x3e>
 3ae:	e1 f0       	breq	.+56     	; 0x3e8 <__fixunssfsi+0x4c>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	88 1f       	adc	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	1a f0       	brmi	.+6      	; 0x3c0 <__fixunssfsi+0x24>
 3ba:	ba 95       	dec	r27
 3bc:	c9 f7       	brne	.-14     	; 0x3b0 <__fixunssfsi+0x14>
 3be:	14 c0       	rjmp	.+40     	; 0x3e8 <__fixunssfsi+0x4c>
 3c0:	b1 30       	cpi	r27, 0x01	; 1
 3c2:	91 f0       	breq	.+36     	; 0x3e8 <__fixunssfsi+0x4c>
 3c4:	0e 94 84 02 	call	0x508	; 0x508 <__fp_zero>
 3c8:	b1 e0       	ldi	r27, 0x01	; 1
 3ca:	08 95       	ret
 3cc:	0c 94 84 02 	jmp	0x508	; 0x508 <__fp_zero>
 3d0:	67 2f       	mov	r22, r23
 3d2:	78 2f       	mov	r23, r24
 3d4:	88 27       	eor	r24, r24
 3d6:	b8 5f       	subi	r27, 0xF8	; 248
 3d8:	39 f0       	breq	.+14     	; 0x3e8 <__fixunssfsi+0x4c>
 3da:	b9 3f       	cpi	r27, 0xF9	; 249
 3dc:	cc f3       	brlt	.-14     	; 0x3d0 <__fixunssfsi+0x34>
 3de:	86 95       	lsr	r24
 3e0:	77 95       	ror	r23
 3e2:	67 95       	ror	r22
 3e4:	b3 95       	inc	r27
 3e6:	d9 f7       	brne	.-10     	; 0x3de <__fixunssfsi+0x42>
 3e8:	3e f4       	brtc	.+14     	; 0x3f8 <__fixunssfsi+0x5c>
 3ea:	90 95       	com	r25
 3ec:	80 95       	com	r24
 3ee:	70 95       	com	r23
 3f0:	61 95       	neg	r22
 3f2:	7f 4f       	sbci	r23, 0xFF	; 255
 3f4:	8f 4f       	sbci	r24, 0xFF	; 255
 3f6:	9f 4f       	sbci	r25, 0xFF	; 255
 3f8:	08 95       	ret

000003fa <__floatunsisf>:
 3fa:	e8 94       	clt
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>

000003fe <__floatsisf>:
 3fe:	97 fb       	bst	r25, 7
 400:	3e f4       	brtc	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 402:	90 95       	com	r25
 404:	80 95       	com	r24
 406:	70 95       	com	r23
 408:	61 95       	neg	r22
 40a:	7f 4f       	sbci	r23, 0xFF	; 255
 40c:	8f 4f       	sbci	r24, 0xFF	; 255
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	99 23       	and	r25, r25
 412:	a9 f0       	breq	.+42     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 414:	f9 2f       	mov	r31, r25
 416:	96 e9       	ldi	r25, 0x96	; 150
 418:	bb 27       	eor	r27, r27
 41a:	93 95       	inc	r25
 41c:	f6 95       	lsr	r31
 41e:	87 95       	ror	r24
 420:	77 95       	ror	r23
 422:	67 95       	ror	r22
 424:	b7 95       	ror	r27
 426:	f1 11       	cpse	r31, r1
 428:	f8 cf       	rjmp	.-16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 42a:	fa f4       	brpl	.+62     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 42c:	bb 0f       	add	r27, r27
 42e:	11 f4       	brne	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	60 ff       	sbrs	r22, 0
 432:	1b c0       	rjmp	.+54     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 434:	6f 5f       	subi	r22, 0xFF	; 255
 436:	7f 4f       	sbci	r23, 0xFF	; 255
 438:	8f 4f       	sbci	r24, 0xFF	; 255
 43a:	9f 4f       	sbci	r25, 0xFF	; 255
 43c:	16 c0       	rjmp	.+44     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 43e:	88 23       	and	r24, r24
 440:	11 f0       	breq	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	96 e9       	ldi	r25, 0x96	; 150
 444:	11 c0       	rjmp	.+34     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 446:	77 23       	and	r23, r23
 448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44a:	9e e8       	ldi	r25, 0x8E	; 142
 44c:	87 2f       	mov	r24, r23
 44e:	76 2f       	mov	r23, r22
 450:	05 c0       	rjmp	.+10     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 452:	66 23       	and	r22, r22
 454:	71 f0       	breq	.+28     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 456:	96 e8       	ldi	r25, 0x86	; 134
 458:	86 2f       	mov	r24, r22
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	2a f0       	brmi	.+10     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 460:	9a 95       	dec	r25
 462:	66 0f       	add	r22, r22
 464:	77 1f       	adc	r23, r23
 466:	88 1f       	adc	r24, r24
 468:	da f7       	brpl	.-10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 46a:	88 0f       	add	r24, r24
 46c:	96 95       	lsr	r25
 46e:	87 95       	ror	r24
 470:	97 f9       	bld	r25, 7
 472:	08 95       	ret

00000474 <__fp_inf>:
 474:	97 f9       	bld	r25, 7
 476:	9f 67       	ori	r25, 0x7F	; 127
 478:	80 e8       	ldi	r24, 0x80	; 128
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	08 95       	ret

00000480 <__fp_nan>:
 480:	9f ef       	ldi	r25, 0xFF	; 255
 482:	80 ec       	ldi	r24, 0xC0	; 192
 484:	08 95       	ret

00000486 <__fp_pscA>:
 486:	00 24       	eor	r0, r0
 488:	0a 94       	dec	r0
 48a:	16 16       	cp	r1, r22
 48c:	17 06       	cpc	r1, r23
 48e:	18 06       	cpc	r1, r24
 490:	09 06       	cpc	r0, r25
 492:	08 95       	ret

00000494 <__fp_pscB>:
 494:	00 24       	eor	r0, r0
 496:	0a 94       	dec	r0
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	05 06       	cpc	r0, r21
 4a0:	08 95       	ret

000004a2 <__fp_round>:
 4a2:	09 2e       	mov	r0, r25
 4a4:	03 94       	inc	r0
 4a6:	00 0c       	add	r0, r0
 4a8:	11 f4       	brne	.+4      	; 0x4ae <__fp_round+0xc>
 4aa:	88 23       	and	r24, r24
 4ac:	52 f0       	brmi	.+20     	; 0x4c2 <__fp_round+0x20>
 4ae:	bb 0f       	add	r27, r27
 4b0:	40 f4       	brcc	.+16     	; 0x4c2 <__fp_round+0x20>
 4b2:	bf 2b       	or	r27, r31
 4b4:	11 f4       	brne	.+4      	; 0x4ba <__fp_round+0x18>
 4b6:	60 ff       	sbrs	r22, 0
 4b8:	04 c0       	rjmp	.+8      	; 0x4c2 <__fp_round+0x20>
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	8f 4f       	sbci	r24, 0xFF	; 255
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
 4c2:	08 95       	ret

000004c4 <__fp_split3>:
 4c4:	57 fd       	sbrc	r21, 7
 4c6:	90 58       	subi	r25, 0x80	; 128
 4c8:	44 0f       	add	r20, r20
 4ca:	55 1f       	adc	r21, r21
 4cc:	59 f0       	breq	.+22     	; 0x4e4 <__fp_splitA+0x10>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	71 f0       	breq	.+28     	; 0x4ee <__fp_splitA+0x1a>
 4d2:	47 95       	ror	r20

000004d4 <__fp_splitA>:
 4d4:	88 0f       	add	r24, r24
 4d6:	97 fb       	bst	r25, 7
 4d8:	99 1f       	adc	r25, r25
 4da:	61 f0       	breq	.+24     	; 0x4f4 <__fp_splitA+0x20>
 4dc:	9f 3f       	cpi	r25, 0xFF	; 255
 4de:	79 f0       	breq	.+30     	; 0x4fe <__fp_splitA+0x2a>
 4e0:	87 95       	ror	r24
 4e2:	08 95       	ret
 4e4:	12 16       	cp	r1, r18
 4e6:	13 06       	cpc	r1, r19
 4e8:	14 06       	cpc	r1, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	f2 cf       	rjmp	.-28     	; 0x4d2 <__fp_split3+0xe>
 4ee:	46 95       	lsr	r20
 4f0:	f1 df       	rcall	.-30     	; 0x4d4 <__fp_splitA>
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <__fp_splitA+0x30>
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	f1 cf       	rjmp	.-30     	; 0x4e0 <__fp_splitA+0xc>
 4fe:	86 95       	lsr	r24
 500:	71 05       	cpc	r23, r1
 502:	61 05       	cpc	r22, r1
 504:	08 94       	sec
 506:	08 95       	ret

00000508 <__fp_zero>:
 508:	e8 94       	clt

0000050a <__fp_szero>:
 50a:	bb 27       	eor	r27, r27
 50c:	66 27       	eor	r22, r22
 50e:	77 27       	eor	r23, r23
 510:	cb 01       	movw	r24, r22
 512:	97 f9       	bld	r25, 7
 514:	08 95       	ret

00000516 <__gesf2>:
 516:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__fp_cmp>
 51a:	08 f4       	brcc	.+2      	; 0x51e <__gesf2+0x8>
 51c:	8f ef       	ldi	r24, 0xFF	; 255
 51e:	08 95       	ret

00000520 <__mulsf3>:
 520:	0e 94 a3 02 	call	0x546	; 0x546 <__mulsf3x>
 524:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__fp_round>
 528:	0e 94 43 02 	call	0x486	; 0x486 <__fp_pscA>
 52c:	38 f0       	brcs	.+14     	; 0x53c <__mulsf3+0x1c>
 52e:	0e 94 4a 02 	call	0x494	; 0x494 <__fp_pscB>
 532:	20 f0       	brcs	.+8      	; 0x53c <__mulsf3+0x1c>
 534:	95 23       	and	r25, r21
 536:	11 f0       	breq	.+4      	; 0x53c <__mulsf3+0x1c>
 538:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 53c:	0c 94 40 02 	jmp	0x480	; 0x480 <__fp_nan>
 540:	11 24       	eor	r1, r1
 542:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>

00000546 <__mulsf3x>:
 546:	0e 94 62 02 	call	0x4c4	; 0x4c4 <__fp_split3>
 54a:	70 f3       	brcs	.-36     	; 0x528 <__mulsf3+0x8>

0000054c <__mulsf3_pse>:
 54c:	95 9f       	mul	r25, r21
 54e:	c1 f3       	breq	.-16     	; 0x540 <__mulsf3+0x20>
 550:	95 0f       	add	r25, r21
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	55 1f       	adc	r21, r21
 556:	62 9f       	mul	r22, r18
 558:	f0 01       	movw	r30, r0
 55a:	72 9f       	mul	r23, r18
 55c:	bb 27       	eor	r27, r27
 55e:	f0 0d       	add	r31, r0
 560:	b1 1d       	adc	r27, r1
 562:	63 9f       	mul	r22, r19
 564:	aa 27       	eor	r26, r26
 566:	f0 0d       	add	r31, r0
 568:	b1 1d       	adc	r27, r1
 56a:	aa 1f       	adc	r26, r26
 56c:	64 9f       	mul	r22, r20
 56e:	66 27       	eor	r22, r22
 570:	b0 0d       	add	r27, r0
 572:	a1 1d       	adc	r26, r1
 574:	66 1f       	adc	r22, r22
 576:	82 9f       	mul	r24, r18
 578:	22 27       	eor	r18, r18
 57a:	b0 0d       	add	r27, r0
 57c:	a1 1d       	adc	r26, r1
 57e:	62 1f       	adc	r22, r18
 580:	73 9f       	mul	r23, r19
 582:	b0 0d       	add	r27, r0
 584:	a1 1d       	adc	r26, r1
 586:	62 1f       	adc	r22, r18
 588:	83 9f       	mul	r24, r19
 58a:	a0 0d       	add	r26, r0
 58c:	61 1d       	adc	r22, r1
 58e:	22 1f       	adc	r18, r18
 590:	74 9f       	mul	r23, r20
 592:	33 27       	eor	r19, r19
 594:	a0 0d       	add	r26, r0
 596:	61 1d       	adc	r22, r1
 598:	23 1f       	adc	r18, r19
 59a:	84 9f       	mul	r24, r20
 59c:	60 0d       	add	r22, r0
 59e:	21 1d       	adc	r18, r1
 5a0:	82 2f       	mov	r24, r18
 5a2:	76 2f       	mov	r23, r22
 5a4:	6a 2f       	mov	r22, r26
 5a6:	11 24       	eor	r1, r1
 5a8:	9f 57       	subi	r25, 0x7F	; 127
 5aa:	50 40       	sbci	r21, 0x00	; 0
 5ac:	9a f0       	brmi	.+38     	; 0x5d4 <__mulsf3_pse+0x88>
 5ae:	f1 f0       	breq	.+60     	; 0x5ec <__mulsf3_pse+0xa0>
 5b0:	88 23       	and	r24, r24
 5b2:	4a f0       	brmi	.+18     	; 0x5c6 <__mulsf3_pse+0x7a>
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	bb 1f       	adc	r27, r27
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	91 50       	subi	r25, 0x01	; 1
 5c2:	50 40       	sbci	r21, 0x00	; 0
 5c4:	a9 f7       	brne	.-22     	; 0x5b0 <__mulsf3_pse+0x64>
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	51 05       	cpc	r21, r1
 5ca:	80 f0       	brcs	.+32     	; 0x5ec <__mulsf3_pse+0xa0>
 5cc:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_inf>
 5d0:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	e4 f3       	brlt	.-8      	; 0x5d0 <__mulsf3_pse+0x84>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	d4 f3       	brlt	.-12     	; 0x5d0 <__mulsf3_pse+0x84>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	e7 95       	ror	r30
 5e8:	9f 5f       	subi	r25, 0xFF	; 255
 5ea:	c1 f7       	brne	.-16     	; 0x5dc <__mulsf3_pse+0x90>
 5ec:	fe 2b       	or	r31, r30
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret

000005fa <__fp_cmp>:
 5fa:	99 0f       	add	r25, r25
 5fc:	00 08       	sbc	r0, r0
 5fe:	55 0f       	add	r21, r21
 600:	aa 0b       	sbc	r26, r26
 602:	e0 e8       	ldi	r30, 0x80	; 128
 604:	fe ef       	ldi	r31, 0xFE	; 254
 606:	16 16       	cp	r1, r22
 608:	17 06       	cpc	r1, r23
 60a:	e8 07       	cpc	r30, r24
 60c:	f9 07       	cpc	r31, r25
 60e:	c0 f0       	brcs	.+48     	; 0x640 <__fp_cmp+0x46>
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	e4 07       	cpc	r30, r20
 616:	f5 07       	cpc	r31, r21
 618:	98 f0       	brcs	.+38     	; 0x640 <__fp_cmp+0x46>
 61a:	62 1b       	sub	r22, r18
 61c:	73 0b       	sbc	r23, r19
 61e:	84 0b       	sbc	r24, r20
 620:	95 0b       	sbc	r25, r21
 622:	39 f4       	brne	.+14     	; 0x632 <__fp_cmp+0x38>
 624:	0a 26       	eor	r0, r26
 626:	61 f0       	breq	.+24     	; 0x640 <__fp_cmp+0x46>
 628:	23 2b       	or	r18, r19
 62a:	24 2b       	or	r18, r20
 62c:	25 2b       	or	r18, r21
 62e:	21 f4       	brne	.+8      	; 0x638 <__fp_cmp+0x3e>
 630:	08 95       	ret
 632:	0a 26       	eor	r0, r26
 634:	09 f4       	brne	.+2      	; 0x638 <__fp_cmp+0x3e>
 636:	a1 40       	sbci	r26, 0x01	; 1
 638:	a6 95       	lsr	r26
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	81 1d       	adc	r24, r1
 63e:	81 1d       	adc	r24, r1
 640:	08 95       	ret

00000642 <_exit>:
 642:	f8 94       	cli

00000644 <__stop_program>:
 644:	ff cf       	rjmp	.-2      	; 0x644 <__stop_program>
