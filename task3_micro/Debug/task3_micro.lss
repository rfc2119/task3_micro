
task3_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000880  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000731  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000397  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000401  00000000  00000000  00001b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000014c  00000000  00000000  00001f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00002059  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 08 03 	jmp	0x610	; 0x610 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
void adc_init(int s0,int s1)
{
	// AREF = Avcc .. Internal
	//s0 = 1 s1 = 1 Internal reference 1.1
	//s0 = 0 s1 = 0 turn off internal reference
	ADMUX = (s0<<REFS0);//if s0 is 1 set refs0 with 1
  90:	82 95       	swap	r24
  92:	88 0f       	add	r24, r24
  94:	88 0f       	add	r24, r24
  96:	80 7c       	andi	r24, 0xC0	; 192
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 83       	st	Z, r24
	ADMUX |= (s1<<REFS1);//if s1 is 1 set refs1 with 1 
  9e:	80 81       	ld	r24, Z
  a0:	76 95       	lsr	r23
  a2:	76 2f       	mov	r23, r22
  a4:	66 27       	eor	r22, r22
  a6:	77 95       	ror	r23
  a8:	67 95       	ror	r22
  aa:	68 2b       	or	r22, r24
  ac:	60 83       	st	Z, r22
	// ADC Enable and prescaler of 8
	// 1000000 / 8 = 125000
	ADCSRA = (1<<ADEN)| (1<<ADPS1)|(1<<ADPS0);
  ae:	83 e8       	ldi	r24, 0x83	; 131
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	08 95       	ret

000000b6 <adc_read>:
}

unsigned int adc_read(unsigned char ch)
{
	// select the corresponding channel 0~7
	ADMUX |= ch;
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	89 2b       	or	r24, r25
  be:	80 83       	st	Z, r24
	// start single conversion, by writing ’1? to ADSC
	ADCSRA |= (1<<ADSC);
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	// wait for conversion to complete, ADSC becomes
	//’0? again, till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <adc_read+0x14>
	return ADC;
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d8:	08 95       	ret

000000da <main>:

int main(void)
{
	
	/*configurations*/
	SET_BIT_IO_RNG(B, PORTB0, PORTB7, OUT);	//output to BCD drivers
  da:	84 b1       	in	r24, 0x04	; 4
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
	SET_BIT_IO_RNG(C, PORTC0, PORTC1, IN);	//ADC{0,1}
  e0:	87 b1       	in	r24, 0x07	; 7
  e2:	8c 7f       	andi	r24, 0xFC	; 252
  e4:	87 b9       	out	0x07, r24	; 7
	
	SET_BIT_IO(D, INT0, IN);		//INT0
  e6:	50 98       	cbi	0x0a, 0	; 10
	SET_BIT(PORTD, PORTD2);			//activate pull-up res for INT0
  e8:	5a 9a       	sbi	0x0b, 2	; 11
	SET_BIT_IO(D, BUZZER, OUT);		//activate buzzer
  ea:	50 9a       	sbi	0x0a, 0	; 10

	EICRA |= (1 << ISC11);  // set INT0 to trigger on falling edge change
  ec:	e9 e6       	ldi	r30, 0x69	; 105
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0); // Turns on INT0 
  f6:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // turn on interrupts
  f8:	78 94       	sei

	/*initializations */
	float analog, digital;
	div_t result;
	mode = MODE_TEMPERATURE_SENSOR;
  fa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	adc_init(1,0);		//5V for all modes
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
			digital = adc_read(MODE_TEMPERATURE_SENSOR);
			analog = (digital * 5) / ((1 << 10) - 1);
			analog *= 100;							//TODO: clarify the magic 100 (hint: 10mv/C)
			if (analog > 60 ){
				SET_BIT(PORTD, BUZZER);  //buzz!
				SET_BIT_RNG(PORTB, PORTB0, PORTB7); //0xff, for debug
 10a:	cf ef       	ldi	r28, 0xFF	; 255
	div_t result;
	mode = MODE_TEMPERATURE_SENSOR;
	adc_init(1,0);		//5V for all modes
	for (;;)
	{
		if (READ_BIT(mode, 0) == MODE_POT){
 10c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 110:	80 ff       	sbrs	r24, 0
 112:	34 c0       	rjmp	.+104    	; 0x17c <main+0xa2>
			analog = reading * v_ref / ((1 << 11) - 1)
			display integer part
			display fraction part
			*/
			
			digital = adc_read(MODE_POT);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = digital * 5 / ((1 << 10) -1 );	//TODO: 1<<10 - 1 is ? (hint: adc bits)
 11a:	bc 01       	movw	r22, r24
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__floatunsisf>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 ea       	ldi	r20, 0xA0	; 160
 12a:	50 e4       	ldi	r21, 0x40	; 64
 12c:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 ec       	ldi	r19, 0xC0	; 192
 134:	4f e7       	ldi	r20, 0x7F	; 127
 136:	54 e4       	ldi	r21, 0x44	; 68
 138:	0e 94 3c 01 	call	0x278	; 0x278 <__divsf3>
 13c:	6b 01       	movw	r12, r22
 13e:	7c 01       	movw	r14, r24
			result = div(analog*10, 10); 
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 e2       	ldi	r20, 0x20	; 32
 146:	51 e4       	ldi	r21, 0x41	; 65
 148:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 14c:	0e 94 ae 01 	call	0x35c	; 0x35c <__fixsfsi>
 150:	dc 01       	movw	r26, r24
 152:	cb 01       	movw	r24, r22
 154:	6a e0       	ldi	r22, 0x0A	; 10
 156:	70 e0       	ldi	r23, 0x00	; 0
 158:	0e 94 14 01 	call	0x228	; 0x228 <__divmodhi4>
			
			// TODO: improve output operation to BCD drivers
			PORTB = (result.rem & 0x0F) << PORTB0;	//display fraction part
 15c:	8f 70       	andi	r24, 0x0F	; 15
 15e:	85 b9       	out	0x05, r24	; 5
			PORTB |= ((int)analog & 0x0F) << PORTB4;//display digit part
 160:	d5 b1       	in	r29, 0x05	; 5
 162:	c7 01       	movw	r24, r14
 164:	b6 01       	movw	r22, r12
 166:	0e 94 ae 01 	call	0x35c	; 0x35c <__fixsfsi>
 16a:	62 95       	swap	r22
 16c:	72 95       	swap	r23
 16e:	70 7f       	andi	r23, 0xF0	; 240
 170:	76 27       	eor	r23, r22
 172:	60 7f       	andi	r22, 0xF0	; 240
 174:	76 27       	eor	r23, r22
 176:	6d 2b       	or	r22, r29
 178:	65 b9       	out	0x05, r22	; 5
 17a:	c8 cf       	rjmp	.-112    	; 0x10c <main+0x32>
			read the lm sensor
			analog = reading * v_ref / ((1 << 11) - 1)
			analog *= 100 (hint: 10mV/C)
			if (analog > 60) BUZZ! display 0xffC
			*/
			digital = adc_read(MODE_TEMPERATURE_SENSOR);
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = (digital * 5) / ((1 << 10) - 1);
 182:	bc 01       	movw	r22, r24
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__floatunsisf>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 ea       	ldi	r20, 0xA0	; 160
 192:	50 e4       	ldi	r21, 0x40	; 64
 194:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 198:	20 e0       	ldi	r18, 0x00	; 0
 19a:	30 ec       	ldi	r19, 0xC0	; 192
 19c:	4f e7       	ldi	r20, 0x7F	; 127
 19e:	54 e4       	ldi	r21, 0x44	; 68
 1a0:	0e 94 3c 01 	call	0x278	; 0x278 <__divsf3>
			analog *= 100;							//TODO: clarify the magic 100 (hint: 10mv/C)
 1a4:	20 e0       	ldi	r18, 0x00	; 0
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	48 ec       	ldi	r20, 0xC8	; 200
 1aa:	52 e4       	ldi	r21, 0x42	; 66
 1ac:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 1b0:	6b 01       	movw	r12, r22
 1b2:	7c 01       	movw	r14, r24
			if (analog > 60 ){
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	40 e7       	ldi	r20, 0x70	; 112
 1ba:	52 e4       	ldi	r21, 0x42	; 66
 1bc:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__gesf2>
 1c0:	18 16       	cp	r1, r24
 1c2:	24 f4       	brge	.+8      	; 0x1cc <main+0xf2>
				SET_BIT(PORTD, BUZZER);  //buzz!
 1c4:	58 9a       	sbi	0x0b, 0	; 11
				SET_BIT_RNG(PORTB, PORTB0, PORTB7); //0xff, for debug
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	c5 b9       	out	0x05, r28	; 5
 1ca:	a0 cf       	rjmp	.-192    	; 0x10c <main+0x32>
			}
			else {
				RESET_BIT(PORTD, BUZZER);
 1cc:	58 98       	cbi	0x0b, 0	; 11
				result = div((int)analog, 10);
 1ce:	c7 01       	movw	r24, r14
 1d0:	b6 01       	movw	r22, r12
 1d2:	0e 94 ae 01 	call	0x35c	; 0x35c <__fixsfsi>
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	6a e0       	ldi	r22, 0x0A	; 10
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 14 01 	call	0x228	; 0x228 <__divmodhi4>

				PORTB = (result.rem & 0x0F) << PORTB0;	//display units part
 1e2:	28 2f       	mov	r18, r24
 1e4:	2f 70       	andi	r18, 0x0F	; 15
 1e6:	25 b9       	out	0x05, r18	; 5
				PORTB |= (result.quot & 0x0F) << PORTB4;//display tens part
 1e8:	25 b1       	in	r18, 0x05	; 5
 1ea:	62 95       	swap	r22
 1ec:	72 95       	swap	r23
 1ee:	70 7f       	andi	r23, 0xF0	; 240
 1f0:	76 27       	eor	r23, r22
 1f2:	60 7f       	andi	r22, 0xF0	; 240
 1f4:	76 27       	eor	r23, r22
 1f6:	62 2b       	or	r22, r18
 1f8:	65 b9       	out	0x05, r22	; 5
 1fa:	88 cf       	rjmp	.-240    	; 0x10c <main+0x32>

000001fc <__vector_1>:
	}
	return -1;
}

ISR (INT0_vect) 
{
 1fc:	1f 92       	push	r1
 1fe:	0f 92       	push	r0
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	8f 93       	push	r24
 208:	9f 93       	push	r25
	/*switches modes and reset display*/
	TOGGLE_BIT(mode, 0);
 20a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	89 27       	eor	r24, r25
 212:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	RESET_BIT_RNG(PORTB, 0, 7);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	15 b8       	out	0x05, r1	; 5
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	0f 90       	pop	r0
 220:	0f be       	out	0x3f, r0	; 63
 222:	0f 90       	pop	r0
 224:	1f 90       	pop	r1
 226:	18 95       	reti

00000228 <__divmodhi4>:
 228:	97 fb       	bst	r25, 7
 22a:	07 2e       	mov	r0, r23
 22c:	16 f4       	brtc	.+4      	; 0x232 <__divmodhi4+0xa>
 22e:	00 94       	com	r0
 230:	07 d0       	rcall	.+14     	; 0x240 <__divmodhi4_neg1>
 232:	77 fd       	sbrc	r23, 7
 234:	09 d0       	rcall	.+18     	; 0x248 <__divmodhi4_neg2>
 236:	0e 94 28 01 	call	0x250	; 0x250 <__udivmodhi4>
 23a:	07 fc       	sbrc	r0, 7
 23c:	05 d0       	rcall	.+10     	; 0x248 <__divmodhi4_neg2>
 23e:	3e f4       	brtc	.+14     	; 0x24e <__divmodhi4_exit>

00000240 <__divmodhi4_neg1>:
 240:	90 95       	com	r25
 242:	81 95       	neg	r24
 244:	9f 4f       	sbci	r25, 0xFF	; 255
 246:	08 95       	ret

00000248 <__divmodhi4_neg2>:
 248:	70 95       	com	r23
 24a:	61 95       	neg	r22
 24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000024e <__divmodhi4_exit>:
 24e:	08 95       	ret

00000250 <__udivmodhi4>:
 250:	aa 1b       	sub	r26, r26
 252:	bb 1b       	sub	r27, r27
 254:	51 e1       	ldi	r21, 0x11	; 17
 256:	07 c0       	rjmp	.+14     	; 0x266 <__udivmodhi4_ep>

00000258 <__udivmodhi4_loop>:
 258:	aa 1f       	adc	r26, r26
 25a:	bb 1f       	adc	r27, r27
 25c:	a6 17       	cp	r26, r22
 25e:	b7 07       	cpc	r27, r23
 260:	10 f0       	brcs	.+4      	; 0x266 <__udivmodhi4_ep>
 262:	a6 1b       	sub	r26, r22
 264:	b7 0b       	sbc	r27, r23

00000266 <__udivmodhi4_ep>:
 266:	88 1f       	adc	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	5a 95       	dec	r21
 26c:	a9 f7       	brne	.-22     	; 0x258 <__udivmodhi4_loop>
 26e:	80 95       	com	r24
 270:	90 95       	com	r25
 272:	bc 01       	movw	r22, r24
 274:	cd 01       	movw	r24, r26
 276:	08 95       	ret

00000278 <__divsf3>:
 278:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divsf3x>
 27c:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_round>
 280:	0e 94 31 02 	call	0x462	; 0x462 <__fp_pscB>
 284:	58 f0       	brcs	.+22     	; 0x29c <__divsf3+0x24>
 286:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_pscA>
 28a:	40 f0       	brcs	.+16     	; 0x29c <__divsf3+0x24>
 28c:	29 f4       	brne	.+10     	; 0x298 <__divsf3+0x20>
 28e:	5f 3f       	cpi	r21, 0xFF	; 255
 290:	29 f0       	breq	.+10     	; 0x29c <__divsf3+0x24>
 292:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 296:	51 11       	cpse	r21, r1
 298:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 29c:	0c 94 27 02 	jmp	0x44e	; 0x44e <__fp_nan>

000002a0 <__divsf3x>:
 2a0:	0e 94 49 02 	call	0x492	; 0x492 <__fp_split3>
 2a4:	68 f3       	brcs	.-38     	; 0x280 <__divsf3+0x8>

000002a6 <__divsf3_pse>:
 2a6:	99 23       	and	r25, r25
 2a8:	b1 f3       	breq	.-20     	; 0x296 <__divsf3+0x1e>
 2aa:	55 23       	and	r21, r21
 2ac:	91 f3       	breq	.-28     	; 0x292 <__divsf3+0x1a>
 2ae:	95 1b       	sub	r25, r21
 2b0:	55 0b       	sbc	r21, r21
 2b2:	bb 27       	eor	r27, r27
 2b4:	aa 27       	eor	r26, r26
 2b6:	62 17       	cp	r22, r18
 2b8:	73 07       	cpc	r23, r19
 2ba:	84 07       	cpc	r24, r20
 2bc:	38 f0       	brcs	.+14     	; 0x2cc <__divsf3_pse+0x26>
 2be:	9f 5f       	subi	r25, 0xFF	; 255
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255
 2c2:	22 0f       	add	r18, r18
 2c4:	33 1f       	adc	r19, r19
 2c6:	44 1f       	adc	r20, r20
 2c8:	aa 1f       	adc	r26, r26
 2ca:	a9 f3       	breq	.-22     	; 0x2b6 <__divsf3_pse+0x10>
 2cc:	35 d0       	rcall	.+106    	; 0x338 <__divsf3_pse+0x92>
 2ce:	0e 2e       	mov	r0, r30
 2d0:	3a f0       	brmi	.+14     	; 0x2e0 <__divsf3_pse+0x3a>
 2d2:	e0 e8       	ldi	r30, 0x80	; 128
 2d4:	32 d0       	rcall	.+100    	; 0x33a <__divsf3_pse+0x94>
 2d6:	91 50       	subi	r25, 0x01	; 1
 2d8:	50 40       	sbci	r21, 0x00	; 0
 2da:	e6 95       	lsr	r30
 2dc:	00 1c       	adc	r0, r0
 2de:	ca f7       	brpl	.-14     	; 0x2d2 <__divsf3_pse+0x2c>
 2e0:	2b d0       	rcall	.+86     	; 0x338 <__divsf3_pse+0x92>
 2e2:	fe 2f       	mov	r31, r30
 2e4:	29 d0       	rcall	.+82     	; 0x338 <__divsf3_pse+0x92>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	88 1f       	adc	r24, r24
 2ec:	bb 1f       	adc	r27, r27
 2ee:	26 17       	cp	r18, r22
 2f0:	37 07       	cpc	r19, r23
 2f2:	48 07       	cpc	r20, r24
 2f4:	ab 07       	cpc	r26, r27
 2f6:	b0 e8       	ldi	r27, 0x80	; 128
 2f8:	09 f0       	breq	.+2      	; 0x2fc <__divsf3_pse+0x56>
 2fa:	bb 0b       	sbc	r27, r27
 2fc:	80 2d       	mov	r24, r0
 2fe:	bf 01       	movw	r22, r30
 300:	ff 27       	eor	r31, r31
 302:	93 58       	subi	r25, 0x83	; 131
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	3a f0       	brmi	.+14     	; 0x316 <__divsf3_pse+0x70>
 308:	9e 3f       	cpi	r25, 0xFE	; 254
 30a:	51 05       	cpc	r21, r1
 30c:	78 f0       	brcs	.+30     	; 0x32c <__divsf3_pse+0x86>
 30e:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 312:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 316:	5f 3f       	cpi	r21, 0xFF	; 255
 318:	e4 f3       	brlt	.-8      	; 0x312 <__divsf3_pse+0x6c>
 31a:	98 3e       	cpi	r25, 0xE8	; 232
 31c:	d4 f3       	brlt	.-12     	; 0x312 <__divsf3_pse+0x6c>
 31e:	86 95       	lsr	r24
 320:	77 95       	ror	r23
 322:	67 95       	ror	r22
 324:	b7 95       	ror	r27
 326:	f7 95       	ror	r31
 328:	9f 5f       	subi	r25, 0xFF	; 255
 32a:	c9 f7       	brne	.-14     	; 0x31e <__divsf3_pse+0x78>
 32c:	88 0f       	add	r24, r24
 32e:	91 1d       	adc	r25, r1
 330:	96 95       	lsr	r25
 332:	87 95       	ror	r24
 334:	97 f9       	bld	r25, 7
 336:	08 95       	ret
 338:	e1 e0       	ldi	r30, 0x01	; 1
 33a:	66 0f       	add	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	bb 1f       	adc	r27, r27
 342:	62 17       	cp	r22, r18
 344:	73 07       	cpc	r23, r19
 346:	84 07       	cpc	r24, r20
 348:	ba 07       	cpc	r27, r26
 34a:	20 f0       	brcs	.+8      	; 0x354 <__divsf3_pse+0xae>
 34c:	62 1b       	sub	r22, r18
 34e:	73 0b       	sbc	r23, r19
 350:	84 0b       	sbc	r24, r20
 352:	ba 0b       	sbc	r27, r26
 354:	ee 1f       	adc	r30, r30
 356:	88 f7       	brcc	.-30     	; 0x33a <__divsf3_pse+0x94>
 358:	e0 95       	com	r30
 35a:	08 95       	ret

0000035c <__fixsfsi>:
 35c:	0e 94 b5 01 	call	0x36a	; 0x36a <__fixunssfsi>
 360:	68 94       	set
 362:	b1 11       	cpse	r27, r1
 364:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 368:	08 95       	ret

0000036a <__fixunssfsi>:
 36a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__fp_splitA>
 36e:	88 f0       	brcs	.+34     	; 0x392 <__fixunssfsi+0x28>
 370:	9f 57       	subi	r25, 0x7F	; 127
 372:	98 f0       	brcs	.+38     	; 0x39a <__fixunssfsi+0x30>
 374:	b9 2f       	mov	r27, r25
 376:	99 27       	eor	r25, r25
 378:	b7 51       	subi	r27, 0x17	; 23
 37a:	b0 f0       	brcs	.+44     	; 0x3a8 <__fixunssfsi+0x3e>
 37c:	e1 f0       	breq	.+56     	; 0x3b6 <__fixunssfsi+0x4c>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	1a f0       	brmi	.+6      	; 0x38e <__fixunssfsi+0x24>
 388:	ba 95       	dec	r27
 38a:	c9 f7       	brne	.-14     	; 0x37e <__fixunssfsi+0x14>
 38c:	14 c0       	rjmp	.+40     	; 0x3b6 <__fixunssfsi+0x4c>
 38e:	b1 30       	cpi	r27, 0x01	; 1
 390:	91 f0       	breq	.+36     	; 0x3b6 <__fixunssfsi+0x4c>
 392:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_zero>
 396:	b1 e0       	ldi	r27, 0x01	; 1
 398:	08 95       	ret
 39a:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <__fp_zero>
 39e:	67 2f       	mov	r22, r23
 3a0:	78 2f       	mov	r23, r24
 3a2:	88 27       	eor	r24, r24
 3a4:	b8 5f       	subi	r27, 0xF8	; 248
 3a6:	39 f0       	breq	.+14     	; 0x3b6 <__fixunssfsi+0x4c>
 3a8:	b9 3f       	cpi	r27, 0xF9	; 249
 3aa:	cc f3       	brlt	.-14     	; 0x39e <__fixunssfsi+0x34>
 3ac:	86 95       	lsr	r24
 3ae:	77 95       	ror	r23
 3b0:	67 95       	ror	r22
 3b2:	b3 95       	inc	r27
 3b4:	d9 f7       	brne	.-10     	; 0x3ac <__fixunssfsi+0x42>
 3b6:	3e f4       	brtc	.+14     	; 0x3c6 <__fixunssfsi+0x5c>
 3b8:	90 95       	com	r25
 3ba:	80 95       	com	r24
 3bc:	70 95       	com	r23
 3be:	61 95       	neg	r22
 3c0:	7f 4f       	sbci	r23, 0xFF	; 255
 3c2:	8f 4f       	sbci	r24, 0xFF	; 255
 3c4:	9f 4f       	sbci	r25, 0xFF	; 255
 3c6:	08 95       	ret

000003c8 <__floatunsisf>:
 3c8:	e8 94       	clt
 3ca:	09 c0       	rjmp	.+18     	; 0x3de <__floatsisf+0x12>

000003cc <__floatsisf>:
 3cc:	97 fb       	bst	r25, 7
 3ce:	3e f4       	brtc	.+14     	; 0x3de <__floatsisf+0x12>
 3d0:	90 95       	com	r25
 3d2:	80 95       	com	r24
 3d4:	70 95       	com	r23
 3d6:	61 95       	neg	r22
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	99 23       	and	r25, r25
 3e0:	a9 f0       	breq	.+42     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e2:	f9 2f       	mov	r31, r25
 3e4:	96 e9       	ldi	r25, 0x96	; 150
 3e6:	bb 27       	eor	r27, r27
 3e8:	93 95       	inc	r25
 3ea:	f6 95       	lsr	r31
 3ec:	87 95       	ror	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b7 95       	ror	r27
 3f4:	f1 11       	cpse	r31, r1
 3f6:	f8 cf       	rjmp	.-16     	; 0x3e8 <__floatsisf+0x1c>
 3f8:	fa f4       	brpl	.+62     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3fa:	bb 0f       	add	r27, r27
 3fc:	11 f4       	brne	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	60 ff       	sbrs	r22, 0
 400:	1b c0       	rjmp	.+54     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 402:	6f 5f       	subi	r22, 0xFF	; 255
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	16 c0       	rjmp	.+44     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 40c:	88 23       	and	r24, r24
 40e:	11 f0       	breq	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	96 e9       	ldi	r25, 0x96	; 150
 412:	11 c0       	rjmp	.+34     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 414:	77 23       	and	r23, r23
 416:	21 f0       	breq	.+8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 418:	9e e8       	ldi	r25, 0x8E	; 142
 41a:	87 2f       	mov	r24, r23
 41c:	76 2f       	mov	r23, r22
 41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 420:	66 23       	and	r22, r22
 422:	71 f0       	breq	.+28     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 424:	96 e8       	ldi	r25, 0x86	; 134
 426:	86 2f       	mov	r24, r22
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	60 e0       	ldi	r22, 0x00	; 0
 42c:	2a f0       	brmi	.+10     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 42e:	9a 95       	dec	r25
 430:	66 0f       	add	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	da f7       	brpl	.-10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 438:	88 0f       	add	r24, r24
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__fp_split3>:
 492:	57 fd       	sbrc	r21, 7
 494:	90 58       	subi	r25, 0x80	; 128
 496:	44 0f       	add	r20, r20
 498:	55 1f       	adc	r21, r21
 49a:	59 f0       	breq	.+22     	; 0x4b2 <__fp_splitA+0x10>
 49c:	5f 3f       	cpi	r21, 0xFF	; 255
 49e:	71 f0       	breq	.+28     	; 0x4bc <__fp_splitA+0x1a>
 4a0:	47 95       	ror	r20

000004a2 <__fp_splitA>:
 4a2:	88 0f       	add	r24, r24
 4a4:	97 fb       	bst	r25, 7
 4a6:	99 1f       	adc	r25, r25
 4a8:	61 f0       	breq	.+24     	; 0x4c2 <__fp_splitA+0x20>
 4aa:	9f 3f       	cpi	r25, 0xFF	; 255
 4ac:	79 f0       	breq	.+30     	; 0x4cc <__fp_splitA+0x2a>
 4ae:	87 95       	ror	r24
 4b0:	08 95       	ret
 4b2:	12 16       	cp	r1, r18
 4b4:	13 06       	cpc	r1, r19
 4b6:	14 06       	cpc	r1, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	f2 cf       	rjmp	.-28     	; 0x4a0 <__fp_split3+0xe>
 4bc:	46 95       	lsr	r20
 4be:	f1 df       	rcall	.-30     	; 0x4a2 <__fp_splitA>
 4c0:	08 c0       	rjmp	.+16     	; 0x4d2 <__fp_splitA+0x30>
 4c2:	16 16       	cp	r1, r22
 4c4:	17 06       	cpc	r1, r23
 4c6:	18 06       	cpc	r1, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	f1 cf       	rjmp	.-30     	; 0x4ae <__fp_splitA+0xc>
 4cc:	86 95       	lsr	r24
 4ce:	71 05       	cpc	r23, r1
 4d0:	61 05       	cpc	r22, r1
 4d2:	08 94       	sec
 4d4:	08 95       	ret

000004d6 <__fp_zero>:
 4d6:	e8 94       	clt

000004d8 <__fp_szero>:
 4d8:	bb 27       	eor	r27, r27
 4da:	66 27       	eor	r22, r22
 4dc:	77 27       	eor	r23, r23
 4de:	cb 01       	movw	r24, r22
 4e0:	97 f9       	bld	r25, 7
 4e2:	08 95       	ret

000004e4 <__gesf2>:
 4e4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <__fp_cmp>
 4e8:	08 f4       	brcc	.+2      	; 0x4ec <__gesf2+0x8>
 4ea:	8f ef       	ldi	r24, 0xFF	; 255
 4ec:	08 95       	ret

000004ee <__mulsf3>:
 4ee:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3x>
 4f2:	0c 94 38 02 	jmp	0x470	; 0x470 <__fp_round>
 4f6:	0e 94 2a 02 	call	0x454	; 0x454 <__fp_pscA>
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__mulsf3+0x1c>
 4fc:	0e 94 31 02 	call	0x462	; 0x462 <__fp_pscB>
 500:	20 f0       	brcs	.+8      	; 0x50a <__mulsf3+0x1c>
 502:	95 23       	and	r25, r21
 504:	11 f0       	breq	.+4      	; 0x50a <__mulsf3+0x1c>
 506:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 50a:	0c 94 27 02 	jmp	0x44e	; 0x44e <__fp_nan>
 50e:	11 24       	eor	r1, r1
 510:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>

00000514 <__mulsf3x>:
 514:	0e 94 49 02 	call	0x492	; 0x492 <__fp_split3>
 518:	70 f3       	brcs	.-36     	; 0x4f6 <__mulsf3+0x8>

0000051a <__mulsf3_pse>:
 51a:	95 9f       	mul	r25, r21
 51c:	c1 f3       	breq	.-16     	; 0x50e <__mulsf3+0x20>
 51e:	95 0f       	add	r25, r21
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	55 1f       	adc	r21, r21
 524:	62 9f       	mul	r22, r18
 526:	f0 01       	movw	r30, r0
 528:	72 9f       	mul	r23, r18
 52a:	bb 27       	eor	r27, r27
 52c:	f0 0d       	add	r31, r0
 52e:	b1 1d       	adc	r27, r1
 530:	63 9f       	mul	r22, r19
 532:	aa 27       	eor	r26, r26
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	aa 1f       	adc	r26, r26
 53a:	64 9f       	mul	r22, r20
 53c:	66 27       	eor	r22, r22
 53e:	b0 0d       	add	r27, r0
 540:	a1 1d       	adc	r26, r1
 542:	66 1f       	adc	r22, r22
 544:	82 9f       	mul	r24, r18
 546:	22 27       	eor	r18, r18
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	62 1f       	adc	r22, r18
 54e:	73 9f       	mul	r23, r19
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	83 9f       	mul	r24, r19
 558:	a0 0d       	add	r26, r0
 55a:	61 1d       	adc	r22, r1
 55c:	22 1f       	adc	r18, r18
 55e:	74 9f       	mul	r23, r20
 560:	33 27       	eor	r19, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	23 1f       	adc	r18, r19
 568:	84 9f       	mul	r24, r20
 56a:	60 0d       	add	r22, r0
 56c:	21 1d       	adc	r18, r1
 56e:	82 2f       	mov	r24, r18
 570:	76 2f       	mov	r23, r22
 572:	6a 2f       	mov	r22, r26
 574:	11 24       	eor	r1, r1
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	9a f0       	brmi	.+38     	; 0x5a2 <__mulsf3_pse+0x88>
 57c:	f1 f0       	breq	.+60     	; 0x5ba <__mulsf3_pse+0xa0>
 57e:	88 23       	and	r24, r24
 580:	4a f0       	brmi	.+18     	; 0x594 <__mulsf3_pse+0x7a>
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	a9 f7       	brne	.-22     	; 0x57e <__mulsf3_pse+0x64>
 594:	9e 3f       	cpi	r25, 0xFE	; 254
 596:	51 05       	cpc	r21, r1
 598:	80 f0       	brcs	.+32     	; 0x5ba <__mulsf3_pse+0xa0>
 59a:	0c 94 21 02 	jmp	0x442	; 0x442 <__fp_inf>
 59e:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	e4 f3       	brlt	.-8      	; 0x59e <__mulsf3_pse+0x84>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	d4 f3       	brlt	.-12     	; 0x59e <__mulsf3_pse+0x84>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x90>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__fp_cmp>:
 5c8:	99 0f       	add	r25, r25
 5ca:	00 08       	sbc	r0, r0
 5cc:	55 0f       	add	r21, r21
 5ce:	aa 0b       	sbc	r26, r26
 5d0:	e0 e8       	ldi	r30, 0x80	; 128
 5d2:	fe ef       	ldi	r31, 0xFE	; 254
 5d4:	16 16       	cp	r1, r22
 5d6:	17 06       	cpc	r1, r23
 5d8:	e8 07       	cpc	r30, r24
 5da:	f9 07       	cpc	r31, r25
 5dc:	c0 f0       	brcs	.+48     	; 0x60e <__fp_cmp+0x46>
 5de:	12 16       	cp	r1, r18
 5e0:	13 06       	cpc	r1, r19
 5e2:	e4 07       	cpc	r30, r20
 5e4:	f5 07       	cpc	r31, r21
 5e6:	98 f0       	brcs	.+38     	; 0x60e <__fp_cmp+0x46>
 5e8:	62 1b       	sub	r22, r18
 5ea:	73 0b       	sbc	r23, r19
 5ec:	84 0b       	sbc	r24, r20
 5ee:	95 0b       	sbc	r25, r21
 5f0:	39 f4       	brne	.+14     	; 0x600 <__fp_cmp+0x38>
 5f2:	0a 26       	eor	r0, r26
 5f4:	61 f0       	breq	.+24     	; 0x60e <__fp_cmp+0x46>
 5f6:	23 2b       	or	r18, r19
 5f8:	24 2b       	or	r18, r20
 5fa:	25 2b       	or	r18, r21
 5fc:	21 f4       	brne	.+8      	; 0x606 <__fp_cmp+0x3e>
 5fe:	08 95       	ret
 600:	0a 26       	eor	r0, r26
 602:	09 f4       	brne	.+2      	; 0x606 <__fp_cmp+0x3e>
 604:	a1 40       	sbci	r26, 0x01	; 1
 606:	a6 95       	lsr	r26
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	81 1d       	adc	r24, r1
 60c:	81 1d       	adc	r24, r1
 60e:	08 95       	ret

00000610 <_exit>:
 610:	f8 94       	cli

00000612 <__stop_program>:
 612:	ff cf       	rjmp	.-2      	; 0x612 <__stop_program>
