
task3_micro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000068c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000891  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  00000fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a7  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b7  00000000  00000000  00001b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c8  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000020b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  88:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <adc_init>:
void adc_init(int s0,int s1)
{
	// AREF = Avcc .. Internal
	//s0 = 1 s1 = 1 Internal reference 1.1
	//s0 = 0 s1 = 0 turn off internal reference
	ADMUX = (s0<<REFS0);//if s0 is 1 set refs0 with 1
  90:	82 95       	swap	r24
  92:	88 0f       	add	r24, r24
  94:	88 0f       	add	r24, r24
  96:	80 7c       	andi	r24, 0xC0	; 192
  98:	ec e7       	ldi	r30, 0x7C	; 124
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 83       	st	Z, r24
	ADMUX |= (s1<<REFS1);//if s1 is 1 set refs1 with 1 
  9e:	80 81       	ld	r24, Z
  a0:	76 95       	lsr	r23
  a2:	76 2f       	mov	r23, r22
  a4:	66 27       	eor	r22, r22
  a6:	77 95       	ror	r23
  a8:	67 95       	ror	r22
  aa:	68 2b       	or	r22, r24
  ac:	60 83       	st	Z, r22
	// ADC Enable and prescaler of 8
	// 1000000 / 8 = 125000
	ADCSRA = (1<<ADEN)| (1<<ADPS1)|(1<<ADPS0);
  ae:	83 e8       	ldi	r24, 0x83	; 131
  b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	08 95       	ret

000000b6 <adc_read>:
}

unsigned int adc_read(unsigned char ch)
{
	
	RESET_BIT_RNG(ADMUX, 0, 4);	//reset any previous selected channel
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	90 7e       	andi	r25, 0xE0	; 224
  be:	90 83       	st	Z, r25
	ADMUX |= ch;	// select the corresponding channel 0~7
  c0:	90 81       	ld	r25, Z
  c2:	89 2b       	or	r24, r25
  c4:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		// start single conversion, by writing '1' to ADSC (AD Start Conversion)
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	80 83       	st	Z, r24
	// when the conversion is complete, ADSC returns to zero
	// till then, poll the ADC Status Register A
	while(ADCSRA & (1<<ADSC));
  d0:	80 81       	ld	r24, Z
  d2:	86 fd       	sbrc	r24, 6
  d4:	fd cf       	rjmp	.-6      	; 0xd0 <adc_read+0x1a>
	return ADC;
  d6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  da:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  de:	08 95       	ret

000000e0 <main>:

int main(void)
{
	
	/*configurations*/
	SET_BIT_IO_RNG(B, PORTB0, PORTB7, OUT);	//output to BCD drivers
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	84 b9       	out	0x04, r24	; 4
	SET_BIT_IO_RNG(C, PORTC0, PORTC1, IN);	//ADC{0,1}
  e6:	87 b1       	in	r24, 0x07	; 7
  e8:	8c 7f       	andi	r24, 0xFC	; 252
  ea:	87 b9       	out	0x07, r24	; 7
	
	SET_BIT_IO(D, INT0, IN);		//INT0
  ec:	50 98       	cbi	0x0a, 0	; 10
	SET_BIT(PORTD, PORTD2);			//activate pull-up res for INT0
  ee:	5a 9a       	sbi	0x0b, 2	; 11
	SET_BIT_IO(D, BUZZER, OUT);		//activate buzzer
  f0:	50 9a       	sbi	0x0a, 0	; 10

	SET_BIT(EICRA, ISC01);  // set INT0 to trigger on falling edge change
  f2:	e9 e6       	ldi	r30, 0x69	; 105
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	RESET_BIT(EICRA, ISC00);
  fc:	80 81       	ld	r24, Z
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT0); // Turns on INT0 
 102:	e8 9a       	sbi	0x1d, 0	; 29
	sei(); // turn on interrupts
 104:	78 94       	sei

	/*initializations */
	float analog, digital;
	div_t result;
	mode = MODE_TEMPERATURE_SENSOR;
 106:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	adc_init(1,0);		//5V for all modes
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 48 00 	call	0x90	; 0x90 <adc_init>
			read the potentiometer
			analog = reading * v_ref / ((1 << 11) - 1)
			display integer part
			display fraction part
			*/
			ADC = 0;
 116:	c8 e7       	ldi	r28, 0x78	; 120
 118:	d0 e0       	ldi	r29, 0x00	; 0
	mode = MODE_TEMPERATURE_SENSOR;
	adc_init(1,0);		//5V for all modes
	
	for (;;)
	{
		if (mode == MODE_POT){
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	91 f5       	brne	.+100    	; 0x186 <main+0xa6>
			read the potentiometer
			analog = reading * v_ref / ((1 << 11) - 1)
			display integer part
			display fraction part
			*/
			ADC = 0;
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	18 82       	st	Y, r1
			digital = adc_read(MODE_POT);
 126:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = (digital * 5) / ((1 << 10) -1 );	//TODO: 1<<10 - 1 is ? (hint: adc bits)
			result = div(analog*10, 10); 
 12a:	bc 01       	movw	r22, r24
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__floatunsisf>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 ea       	ldi	r20, 0xA0	; 160
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 ec       	ldi	r19, 0xC0	; 192
 144:	4f e7       	ldi	r20, 0x7F	; 127
 146:	54 e4       	ldi	r21, 0x44	; 68
 148:	0e 94 3e 01 	call	0x27c	; 0x27c <__divsf3>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e4       	ldi	r21, 0x41	; 65
 154:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
 158:	0e 94 b0 01 	call	0x360	; 0x360 <__fixsfsi>
 15c:	dc 01       	movw	r26, r24
 15e:	cb 01       	movw	r24, r22
 160:	6a e0       	ldi	r22, 0x0A	; 10
 162:	70 e0       	ldi	r23, 0x00	; 0
 164:	0e 94 16 01 	call	0x22c	; 0x22c <__divmodhi4>
 168:	26 2f       	mov	r18, r22
 16a:	37 2f       	mov	r19, r23
			
			// TODO: improve output operation to BCD drivers
			PORTB = (result.rem & 0x0F) << PORTB0;	//display fraction part
 16c:	8f 70       	andi	r24, 0x0F	; 15
 16e:	85 b9       	out	0x05, r24	; 5
			PORTB |= (result.quot & 0x0F) << PORTB4;//display digit part
 170:	85 b1       	in	r24, 0x05	; 5
 172:	22 95       	swap	r18
 174:	32 95       	swap	r19
 176:	30 7f       	andi	r19, 0xF0	; 240
 178:	32 27       	eor	r19, r18
 17a:	20 7f       	andi	r18, 0xF0	; 240
 17c:	32 27       	eor	r19, r18
 17e:	28 2b       	or	r18, r24
 180:	25 b9       	out	0x05, r18	; 5
			
			//
			RESET_BIT(PORTD, BUZZER);
 182:	58 98       	cbi	0x0b, 0	; 11
 184:	ca cf       	rjmp	.-108    	; 0x11a <main+0x3a>
			read the lm sensor
			analog = reading * v_ref / ((1 << 11) - 1)
			analog *= 100 (hint: 10mV/C)
			if (analog > 60) BUZZ!
			*/
			digital = adc_read(MODE_TEMPERATURE_SENSOR);
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 5b 00 	call	0xb6	; 0xb6 <adc_read>
			analog = (digital * 5) / ((1 << 10) - 1);
 18c:	bc 01       	movw	r22, r24
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 e6 01 	call	0x3cc	; 0x3cc <__floatunsisf>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	40 ea       	ldi	r20, 0xA0	; 160
 19c:	50 e4       	ldi	r21, 0x40	; 64
 19e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 ec       	ldi	r19, 0xC0	; 192
 1a6:	4f e7       	ldi	r20, 0x7F	; 127
 1a8:	54 e4       	ldi	r21, 0x44	; 68
 1aa:	0e 94 3e 01 	call	0x27c	; 0x27c <__divsf3>
			analog *= 100;							//TODO: clarify the magic 100 (hint: 10mv/C)
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	48 ec       	ldi	r20, 0xC8	; 200
 1b4:	52 e4       	ldi	r21, 0x42	; 66
 1b6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__mulsf3>
 1ba:	6b 01       	movw	r12, r22
 1bc:	7c 01       	movw	r14, r24
			(analog > 60) ?	SET_BIT(PORTD, BUZZER) : RESET_BIT(PORTD, BUZZER);
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e7       	ldi	r20, 0x70	; 112
 1c4:	52 e4       	ldi	r21, 0x42	; 66
 1c6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <__gesf2>
 1ca:	18 16       	cp	r1, r24
 1cc:	14 f4       	brge	.+4      	; 0x1d2 <main+0xf2>
 1ce:	58 9a       	sbi	0x0b, 0	; 11
 1d0:	01 c0       	rjmp	.+2      	; 0x1d4 <main+0xf4>
 1d2:	58 98       	cbi	0x0b, 0	; 11
			
			result = div((int)analog, 10);
 1d4:	c7 01       	movw	r24, r14
 1d6:	b6 01       	movw	r22, r12
 1d8:	0e 94 b0 01 	call	0x360	; 0x360 <__fixsfsi>
 1dc:	dc 01       	movw	r26, r24
 1de:	cb 01       	movw	r24, r22
 1e0:	6a e0       	ldi	r22, 0x0A	; 10
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	0e 94 16 01 	call	0x22c	; 0x22c <__divmodhi4>
 1e8:	26 2f       	mov	r18, r22
 1ea:	37 2f       	mov	r19, r23
			PORTB = (result.rem & 0x0F) << PORTB0;	//display units part
 1ec:	8f 70       	andi	r24, 0x0F	; 15
 1ee:	85 b9       	out	0x05, r24	; 5
			PORTB |= (result.quot & 0x0F) << PORTB4;//display tens part
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	22 95       	swap	r18
 1f4:	32 95       	swap	r19
 1f6:	30 7f       	andi	r19, 0xF0	; 240
 1f8:	32 27       	eor	r19, r18
 1fa:	20 7f       	andi	r18, 0xF0	; 240
 1fc:	32 27       	eor	r19, r18
 1fe:	28 2b       	or	r18, r24
 200:	25 b9       	out	0x05, r18	; 5
 202:	8b cf       	rjmp	.-234    	; 0x11a <main+0x3a>

00000204 <__vector_1>:
	}
	return -1;
}

ISR (INT0_vect) 
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
	/*switches modes*/
	TOGGLE_BIT(mode, 0);
 212:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	89 27       	eor	r24, r25
 21a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <__divmodhi4>:
 22c:	97 fb       	bst	r25, 7
 22e:	07 2e       	mov	r0, r23
 230:	16 f4       	brtc	.+4      	; 0x236 <__divmodhi4+0xa>
 232:	00 94       	com	r0
 234:	07 d0       	rcall	.+14     	; 0x244 <__divmodhi4_neg1>
 236:	77 fd       	sbrc	r23, 7
 238:	09 d0       	rcall	.+18     	; 0x24c <__divmodhi4_neg2>
 23a:	0e 94 2a 01 	call	0x254	; 0x254 <__udivmodhi4>
 23e:	07 fc       	sbrc	r0, 7
 240:	05 d0       	rcall	.+10     	; 0x24c <__divmodhi4_neg2>
 242:	3e f4       	brtc	.+14     	; 0x252 <__divmodhi4_exit>

00000244 <__divmodhi4_neg1>:
 244:	90 95       	com	r25
 246:	81 95       	neg	r24
 248:	9f 4f       	sbci	r25, 0xFF	; 255
 24a:	08 95       	ret

0000024c <__divmodhi4_neg2>:
 24c:	70 95       	com	r23
 24e:	61 95       	neg	r22
 250:	7f 4f       	sbci	r23, 0xFF	; 255

00000252 <__divmodhi4_exit>:
 252:	08 95       	ret

00000254 <__udivmodhi4>:
 254:	aa 1b       	sub	r26, r26
 256:	bb 1b       	sub	r27, r27
 258:	51 e1       	ldi	r21, 0x11	; 17
 25a:	07 c0       	rjmp	.+14     	; 0x26a <__udivmodhi4_ep>

0000025c <__udivmodhi4_loop>:
 25c:	aa 1f       	adc	r26, r26
 25e:	bb 1f       	adc	r27, r27
 260:	a6 17       	cp	r26, r22
 262:	b7 07       	cpc	r27, r23
 264:	10 f0       	brcs	.+4      	; 0x26a <__udivmodhi4_ep>
 266:	a6 1b       	sub	r26, r22
 268:	b7 0b       	sbc	r27, r23

0000026a <__udivmodhi4_ep>:
 26a:	88 1f       	adc	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	5a 95       	dec	r21
 270:	a9 f7       	brne	.-22     	; 0x25c <__udivmodhi4_loop>
 272:	80 95       	com	r24
 274:	90 95       	com	r25
 276:	bc 01       	movw	r22, r24
 278:	cd 01       	movw	r24, r26
 27a:	08 95       	ret

0000027c <__divsf3>:
 27c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divsf3x>
 280:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_round>
 284:	0e 94 33 02 	call	0x466	; 0x466 <__fp_pscB>
 288:	58 f0       	brcs	.+22     	; 0x2a0 <__divsf3+0x24>
 28a:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_pscA>
 28e:	40 f0       	brcs	.+16     	; 0x2a0 <__divsf3+0x24>
 290:	29 f4       	brne	.+10     	; 0x29c <__divsf3+0x20>
 292:	5f 3f       	cpi	r21, 0xFF	; 255
 294:	29 f0       	breq	.+10     	; 0x2a0 <__divsf3+0x24>
 296:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_inf>
 29a:	51 11       	cpse	r21, r1
 29c:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_szero>
 2a0:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_nan>

000002a4 <__divsf3x>:
 2a4:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_split3>
 2a8:	68 f3       	brcs	.-38     	; 0x284 <__divsf3+0x8>

000002aa <__divsf3_pse>:
 2aa:	99 23       	and	r25, r25
 2ac:	b1 f3       	breq	.-20     	; 0x29a <__divsf3+0x1e>
 2ae:	55 23       	and	r21, r21
 2b0:	91 f3       	breq	.-28     	; 0x296 <__divsf3+0x1a>
 2b2:	95 1b       	sub	r25, r21
 2b4:	55 0b       	sbc	r21, r21
 2b6:	bb 27       	eor	r27, r27
 2b8:	aa 27       	eor	r26, r26
 2ba:	62 17       	cp	r22, r18
 2bc:	73 07       	cpc	r23, r19
 2be:	84 07       	cpc	r24, r20
 2c0:	38 f0       	brcs	.+14     	; 0x2d0 <__divsf3_pse+0x26>
 2c2:	9f 5f       	subi	r25, 0xFF	; 255
 2c4:	5f 4f       	sbci	r21, 0xFF	; 255
 2c6:	22 0f       	add	r18, r18
 2c8:	33 1f       	adc	r19, r19
 2ca:	44 1f       	adc	r20, r20
 2cc:	aa 1f       	adc	r26, r26
 2ce:	a9 f3       	breq	.-22     	; 0x2ba <__divsf3_pse+0x10>
 2d0:	35 d0       	rcall	.+106    	; 0x33c <__divsf3_pse+0x92>
 2d2:	0e 2e       	mov	r0, r30
 2d4:	3a f0       	brmi	.+14     	; 0x2e4 <__divsf3_pse+0x3a>
 2d6:	e0 e8       	ldi	r30, 0x80	; 128
 2d8:	32 d0       	rcall	.+100    	; 0x33e <__divsf3_pse+0x94>
 2da:	91 50       	subi	r25, 0x01	; 1
 2dc:	50 40       	sbci	r21, 0x00	; 0
 2de:	e6 95       	lsr	r30
 2e0:	00 1c       	adc	r0, r0
 2e2:	ca f7       	brpl	.-14     	; 0x2d6 <__divsf3_pse+0x2c>
 2e4:	2b d0       	rcall	.+86     	; 0x33c <__divsf3_pse+0x92>
 2e6:	fe 2f       	mov	r31, r30
 2e8:	29 d0       	rcall	.+82     	; 0x33c <__divsf3_pse+0x92>
 2ea:	66 0f       	add	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	88 1f       	adc	r24, r24
 2f0:	bb 1f       	adc	r27, r27
 2f2:	26 17       	cp	r18, r22
 2f4:	37 07       	cpc	r19, r23
 2f6:	48 07       	cpc	r20, r24
 2f8:	ab 07       	cpc	r26, r27
 2fa:	b0 e8       	ldi	r27, 0x80	; 128
 2fc:	09 f0       	breq	.+2      	; 0x300 <__divsf3_pse+0x56>
 2fe:	bb 0b       	sbc	r27, r27
 300:	80 2d       	mov	r24, r0
 302:	bf 01       	movw	r22, r30
 304:	ff 27       	eor	r31, r31
 306:	93 58       	subi	r25, 0x83	; 131
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	3a f0       	brmi	.+14     	; 0x31a <__divsf3_pse+0x70>
 30c:	9e 3f       	cpi	r25, 0xFE	; 254
 30e:	51 05       	cpc	r21, r1
 310:	78 f0       	brcs	.+30     	; 0x330 <__divsf3_pse+0x86>
 312:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_inf>
 316:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_szero>
 31a:	5f 3f       	cpi	r21, 0xFF	; 255
 31c:	e4 f3       	brlt	.-8      	; 0x316 <__divsf3_pse+0x6c>
 31e:	98 3e       	cpi	r25, 0xE8	; 232
 320:	d4 f3       	brlt	.-12     	; 0x316 <__divsf3_pse+0x6c>
 322:	86 95       	lsr	r24
 324:	77 95       	ror	r23
 326:	67 95       	ror	r22
 328:	b7 95       	ror	r27
 32a:	f7 95       	ror	r31
 32c:	9f 5f       	subi	r25, 0xFF	; 255
 32e:	c9 f7       	brne	.-14     	; 0x322 <__divsf3_pse+0x78>
 330:	88 0f       	add	r24, r24
 332:	91 1d       	adc	r25, r1
 334:	96 95       	lsr	r25
 336:	87 95       	ror	r24
 338:	97 f9       	bld	r25, 7
 33a:	08 95       	ret
 33c:	e1 e0       	ldi	r30, 0x01	; 1
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	88 1f       	adc	r24, r24
 344:	bb 1f       	adc	r27, r27
 346:	62 17       	cp	r22, r18
 348:	73 07       	cpc	r23, r19
 34a:	84 07       	cpc	r24, r20
 34c:	ba 07       	cpc	r27, r26
 34e:	20 f0       	brcs	.+8      	; 0x358 <__divsf3_pse+0xae>
 350:	62 1b       	sub	r22, r18
 352:	73 0b       	sbc	r23, r19
 354:	84 0b       	sbc	r24, r20
 356:	ba 0b       	sbc	r27, r26
 358:	ee 1f       	adc	r30, r30
 35a:	88 f7       	brcc	.-30     	; 0x33e <__divsf3_pse+0x94>
 35c:	e0 95       	com	r30
 35e:	08 95       	ret

00000360 <__fixsfsi>:
 360:	0e 94 b7 01 	call	0x36e	; 0x36e <__fixunssfsi>
 364:	68 94       	set
 366:	b1 11       	cpse	r27, r1
 368:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_szero>
 36c:	08 95       	ret

0000036e <__fixunssfsi>:
 36e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_splitA>
 372:	88 f0       	brcs	.+34     	; 0x396 <__fixunssfsi+0x28>
 374:	9f 57       	subi	r25, 0x7F	; 127
 376:	98 f0       	brcs	.+38     	; 0x39e <__fixunssfsi+0x30>
 378:	b9 2f       	mov	r27, r25
 37a:	99 27       	eor	r25, r25
 37c:	b7 51       	subi	r27, 0x17	; 23
 37e:	b0 f0       	brcs	.+44     	; 0x3ac <__fixunssfsi+0x3e>
 380:	e1 f0       	breq	.+56     	; 0x3ba <__fixunssfsi+0x4c>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	88 1f       	adc	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	1a f0       	brmi	.+6      	; 0x392 <__fixunssfsi+0x24>
 38c:	ba 95       	dec	r27
 38e:	c9 f7       	brne	.-14     	; 0x382 <__fixunssfsi+0x14>
 390:	14 c0       	rjmp	.+40     	; 0x3ba <__fixunssfsi+0x4c>
 392:	b1 30       	cpi	r27, 0x01	; 1
 394:	91 f0       	breq	.+36     	; 0x3ba <__fixunssfsi+0x4c>
 396:	0e 94 6d 02 	call	0x4da	; 0x4da <__fp_zero>
 39a:	b1 e0       	ldi	r27, 0x01	; 1
 39c:	08 95       	ret
 39e:	0c 94 6d 02 	jmp	0x4da	; 0x4da <__fp_zero>
 3a2:	67 2f       	mov	r22, r23
 3a4:	78 2f       	mov	r23, r24
 3a6:	88 27       	eor	r24, r24
 3a8:	b8 5f       	subi	r27, 0xF8	; 248
 3aa:	39 f0       	breq	.+14     	; 0x3ba <__fixunssfsi+0x4c>
 3ac:	b9 3f       	cpi	r27, 0xF9	; 249
 3ae:	cc f3       	brlt	.-14     	; 0x3a2 <__fixunssfsi+0x34>
 3b0:	86 95       	lsr	r24
 3b2:	77 95       	ror	r23
 3b4:	67 95       	ror	r22
 3b6:	b3 95       	inc	r27
 3b8:	d9 f7       	brne	.-10     	; 0x3b0 <__fixunssfsi+0x42>
 3ba:	3e f4       	brtc	.+14     	; 0x3ca <__fixunssfsi+0x5c>
 3bc:	90 95       	com	r25
 3be:	80 95       	com	r24
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	08 95       	ret

000003cc <__floatunsisf>:
 3cc:	e8 94       	clt
 3ce:	09 c0       	rjmp	.+18     	; 0x3e2 <__floatsisf+0x12>

000003d0 <__floatsisf>:
 3d0:	97 fb       	bst	r25, 7
 3d2:	3e f4       	brtc	.+14     	; 0x3e2 <__floatsisf+0x12>
 3d4:	90 95       	com	r25
 3d6:	80 95       	com	r24
 3d8:	70 95       	com	r23
 3da:	61 95       	neg	r22
 3dc:	7f 4f       	sbci	r23, 0xFF	; 255
 3de:	8f 4f       	sbci	r24, 0xFF	; 255
 3e0:	9f 4f       	sbci	r25, 0xFF	; 255
 3e2:	99 23       	and	r25, r25
 3e4:	a9 f0       	breq	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e6:	f9 2f       	mov	r31, r25
 3e8:	96 e9       	ldi	r25, 0x96	; 150
 3ea:	bb 27       	eor	r27, r27
 3ec:	93 95       	inc	r25
 3ee:	f6 95       	lsr	r31
 3f0:	87 95       	ror	r24
 3f2:	77 95       	ror	r23
 3f4:	67 95       	ror	r22
 3f6:	b7 95       	ror	r27
 3f8:	f1 11       	cpse	r31, r1
 3fa:	f8 cf       	rjmp	.-16     	; 0x3ec <__floatsisf+0x1c>
 3fc:	fa f4       	brpl	.+62     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 3fe:	bb 0f       	add	r27, r27
 400:	11 f4       	brne	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 402:	60 ff       	sbrs	r22, 0
 404:	1b c0       	rjmp	.+54     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 406:	6f 5f       	subi	r22, 0xFF	; 255
 408:	7f 4f       	sbci	r23, 0xFF	; 255
 40a:	8f 4f       	sbci	r24, 0xFF	; 255
 40c:	9f 4f       	sbci	r25, 0xFF	; 255
 40e:	16 c0       	rjmp	.+44     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 410:	88 23       	and	r24, r24
 412:	11 f0       	breq	.+4      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 414:	96 e9       	ldi	r25, 0x96	; 150
 416:	11 c0       	rjmp	.+34     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 418:	77 23       	and	r23, r23
 41a:	21 f0       	breq	.+8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41c:	9e e8       	ldi	r25, 0x8E	; 142
 41e:	87 2f       	mov	r24, r23
 420:	76 2f       	mov	r23, r22
 422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 424:	66 23       	and	r22, r22
 426:	71 f0       	breq	.+28     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 428:	96 e8       	ldi	r25, 0x86	; 134
 42a:	86 2f       	mov	r24, r22
 42c:	70 e0       	ldi	r23, 0x00	; 0
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	2a f0       	brmi	.+10     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 432:	9a 95       	dec	r25
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	da f7       	brpl	.-10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 43c:	88 0f       	add	r24, r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	97 f9       	bld	r25, 7
 444:	08 95       	ret

00000446 <__fp_inf>:
 446:	97 f9       	bld	r25, 7
 448:	9f 67       	ori	r25, 0x7F	; 127
 44a:	80 e8       	ldi	r24, 0x80	; 128
 44c:	70 e0       	ldi	r23, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	08 95       	ret

00000452 <__fp_nan>:
 452:	9f ef       	ldi	r25, 0xFF	; 255
 454:	80 ec       	ldi	r24, 0xC0	; 192
 456:	08 95       	ret

00000458 <__fp_pscA>:
 458:	00 24       	eor	r0, r0
 45a:	0a 94       	dec	r0
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	18 06       	cpc	r1, r24
 462:	09 06       	cpc	r0, r25
 464:	08 95       	ret

00000466 <__fp_pscB>:
 466:	00 24       	eor	r0, r0
 468:	0a 94       	dec	r0
 46a:	12 16       	cp	r1, r18
 46c:	13 06       	cpc	r1, r19
 46e:	14 06       	cpc	r1, r20
 470:	05 06       	cpc	r0, r21
 472:	08 95       	ret

00000474 <__fp_round>:
 474:	09 2e       	mov	r0, r25
 476:	03 94       	inc	r0
 478:	00 0c       	add	r0, r0
 47a:	11 f4       	brne	.+4      	; 0x480 <__fp_round+0xc>
 47c:	88 23       	and	r24, r24
 47e:	52 f0       	brmi	.+20     	; 0x494 <__fp_round+0x20>
 480:	bb 0f       	add	r27, r27
 482:	40 f4       	brcc	.+16     	; 0x494 <__fp_round+0x20>
 484:	bf 2b       	or	r27, r31
 486:	11 f4       	brne	.+4      	; 0x48c <__fp_round+0x18>
 488:	60 ff       	sbrs	r22, 0
 48a:	04 c0       	rjmp	.+8      	; 0x494 <__fp_round+0x20>
 48c:	6f 5f       	subi	r22, 0xFF	; 255
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__fp_split3>:
 496:	57 fd       	sbrc	r21, 7
 498:	90 58       	subi	r25, 0x80	; 128
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	59 f0       	breq	.+22     	; 0x4b6 <__fp_splitA+0x10>
 4a0:	5f 3f       	cpi	r21, 0xFF	; 255
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <__fp_splitA+0x1a>
 4a4:	47 95       	ror	r20

000004a6 <__fp_splitA>:
 4a6:	88 0f       	add	r24, r24
 4a8:	97 fb       	bst	r25, 7
 4aa:	99 1f       	adc	r25, r25
 4ac:	61 f0       	breq	.+24     	; 0x4c6 <__fp_splitA+0x20>
 4ae:	9f 3f       	cpi	r25, 0xFF	; 255
 4b0:	79 f0       	breq	.+30     	; 0x4d0 <__fp_splitA+0x2a>
 4b2:	87 95       	ror	r24
 4b4:	08 95       	ret
 4b6:	12 16       	cp	r1, r18
 4b8:	13 06       	cpc	r1, r19
 4ba:	14 06       	cpc	r1, r20
 4bc:	55 1f       	adc	r21, r21
 4be:	f2 cf       	rjmp	.-28     	; 0x4a4 <__fp_split3+0xe>
 4c0:	46 95       	lsr	r20
 4c2:	f1 df       	rcall	.-30     	; 0x4a6 <__fp_splitA>
 4c4:	08 c0       	rjmp	.+16     	; 0x4d6 <__fp_splitA+0x30>
 4c6:	16 16       	cp	r1, r22
 4c8:	17 06       	cpc	r1, r23
 4ca:	18 06       	cpc	r1, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	f1 cf       	rjmp	.-30     	; 0x4b2 <__fp_splitA+0xc>
 4d0:	86 95       	lsr	r24
 4d2:	71 05       	cpc	r23, r1
 4d4:	61 05       	cpc	r22, r1
 4d6:	08 94       	sec
 4d8:	08 95       	ret

000004da <__fp_zero>:
 4da:	e8 94       	clt

000004dc <__fp_szero>:
 4dc:	bb 27       	eor	r27, r27
 4de:	66 27       	eor	r22, r22
 4e0:	77 27       	eor	r23, r23
 4e2:	cb 01       	movw	r24, r22
 4e4:	97 f9       	bld	r25, 7
 4e6:	08 95       	ret

000004e8 <__gesf2>:
 4e8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__fp_cmp>
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <__gesf2+0x8>
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__mulsf3>:
 4f2:	0e 94 8c 02 	call	0x518	; 0x518 <__mulsf3x>
 4f6:	0c 94 3a 02 	jmp	0x474	; 0x474 <__fp_round>
 4fa:	0e 94 2c 02 	call	0x458	; 0x458 <__fp_pscA>
 4fe:	38 f0       	brcs	.+14     	; 0x50e <__mulsf3+0x1c>
 500:	0e 94 33 02 	call	0x466	; 0x466 <__fp_pscB>
 504:	20 f0       	brcs	.+8      	; 0x50e <__mulsf3+0x1c>
 506:	95 23       	and	r25, r21
 508:	11 f0       	breq	.+4      	; 0x50e <__mulsf3+0x1c>
 50a:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_inf>
 50e:	0c 94 29 02 	jmp	0x452	; 0x452 <__fp_nan>
 512:	11 24       	eor	r1, r1
 514:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_szero>

00000518 <__mulsf3x>:
 518:	0e 94 4b 02 	call	0x496	; 0x496 <__fp_split3>
 51c:	70 f3       	brcs	.-36     	; 0x4fa <__mulsf3+0x8>

0000051e <__mulsf3_pse>:
 51e:	95 9f       	mul	r25, r21
 520:	c1 f3       	breq	.-16     	; 0x512 <__mulsf3+0x20>
 522:	95 0f       	add	r25, r21
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	55 1f       	adc	r21, r21
 528:	62 9f       	mul	r22, r18
 52a:	f0 01       	movw	r30, r0
 52c:	72 9f       	mul	r23, r18
 52e:	bb 27       	eor	r27, r27
 530:	f0 0d       	add	r31, r0
 532:	b1 1d       	adc	r27, r1
 534:	63 9f       	mul	r22, r19
 536:	aa 27       	eor	r26, r26
 538:	f0 0d       	add	r31, r0
 53a:	b1 1d       	adc	r27, r1
 53c:	aa 1f       	adc	r26, r26
 53e:	64 9f       	mul	r22, r20
 540:	66 27       	eor	r22, r22
 542:	b0 0d       	add	r27, r0
 544:	a1 1d       	adc	r26, r1
 546:	66 1f       	adc	r22, r22
 548:	82 9f       	mul	r24, r18
 54a:	22 27       	eor	r18, r18
 54c:	b0 0d       	add	r27, r0
 54e:	a1 1d       	adc	r26, r1
 550:	62 1f       	adc	r22, r18
 552:	73 9f       	mul	r23, r19
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	62 1f       	adc	r22, r18
 55a:	83 9f       	mul	r24, r19
 55c:	a0 0d       	add	r26, r0
 55e:	61 1d       	adc	r22, r1
 560:	22 1f       	adc	r18, r18
 562:	74 9f       	mul	r23, r20
 564:	33 27       	eor	r19, r19
 566:	a0 0d       	add	r26, r0
 568:	61 1d       	adc	r22, r1
 56a:	23 1f       	adc	r18, r19
 56c:	84 9f       	mul	r24, r20
 56e:	60 0d       	add	r22, r0
 570:	21 1d       	adc	r18, r1
 572:	82 2f       	mov	r24, r18
 574:	76 2f       	mov	r23, r22
 576:	6a 2f       	mov	r22, r26
 578:	11 24       	eor	r1, r1
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	9a f0       	brmi	.+38     	; 0x5a6 <__mulsf3_pse+0x88>
 580:	f1 f0       	breq	.+60     	; 0x5be <__mulsf3_pse+0xa0>
 582:	88 23       	and	r24, r24
 584:	4a f0       	brmi	.+18     	; 0x598 <__mulsf3_pse+0x7a>
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	a9 f7       	brne	.-22     	; 0x582 <__mulsf3_pse+0x64>
 598:	9e 3f       	cpi	r25, 0xFE	; 254
 59a:	51 05       	cpc	r21, r1
 59c:	80 f0       	brcs	.+32     	; 0x5be <__mulsf3_pse+0xa0>
 59e:	0c 94 23 02 	jmp	0x446	; 0x446 <__fp_inf>
 5a2:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__fp_szero>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	e4 f3       	brlt	.-8      	; 0x5a2 <__mulsf3_pse+0x84>
 5aa:	98 3e       	cpi	r25, 0xE8	; 232
 5ac:	d4 f3       	brlt	.-12     	; 0x5a2 <__mulsf3_pse+0x84>
 5ae:	86 95       	lsr	r24
 5b0:	77 95       	ror	r23
 5b2:	67 95       	ror	r22
 5b4:	b7 95       	ror	r27
 5b6:	f7 95       	ror	r31
 5b8:	e7 95       	ror	r30
 5ba:	9f 5f       	subi	r25, 0xFF	; 255
 5bc:	c1 f7       	brne	.-16     	; 0x5ae <__mulsf3_pse+0x90>
 5be:	fe 2b       	or	r31, r30
 5c0:	88 0f       	add	r24, r24
 5c2:	91 1d       	adc	r25, r1
 5c4:	96 95       	lsr	r25
 5c6:	87 95       	ror	r24
 5c8:	97 f9       	bld	r25, 7
 5ca:	08 95       	ret

000005cc <__fp_cmp>:
 5cc:	99 0f       	add	r25, r25
 5ce:	00 08       	sbc	r0, r0
 5d0:	55 0f       	add	r21, r21
 5d2:	aa 0b       	sbc	r26, r26
 5d4:	e0 e8       	ldi	r30, 0x80	; 128
 5d6:	fe ef       	ldi	r31, 0xFE	; 254
 5d8:	16 16       	cp	r1, r22
 5da:	17 06       	cpc	r1, r23
 5dc:	e8 07       	cpc	r30, r24
 5de:	f9 07       	cpc	r31, r25
 5e0:	c0 f0       	brcs	.+48     	; 0x612 <__fp_cmp+0x46>
 5e2:	12 16       	cp	r1, r18
 5e4:	13 06       	cpc	r1, r19
 5e6:	e4 07       	cpc	r30, r20
 5e8:	f5 07       	cpc	r31, r21
 5ea:	98 f0       	brcs	.+38     	; 0x612 <__fp_cmp+0x46>
 5ec:	62 1b       	sub	r22, r18
 5ee:	73 0b       	sbc	r23, r19
 5f0:	84 0b       	sbc	r24, r20
 5f2:	95 0b       	sbc	r25, r21
 5f4:	39 f4       	brne	.+14     	; 0x604 <__fp_cmp+0x38>
 5f6:	0a 26       	eor	r0, r26
 5f8:	61 f0       	breq	.+24     	; 0x612 <__fp_cmp+0x46>
 5fa:	23 2b       	or	r18, r19
 5fc:	24 2b       	or	r18, r20
 5fe:	25 2b       	or	r18, r21
 600:	21 f4       	brne	.+8      	; 0x60a <__fp_cmp+0x3e>
 602:	08 95       	ret
 604:	0a 26       	eor	r0, r26
 606:	09 f4       	brne	.+2      	; 0x60a <__fp_cmp+0x3e>
 608:	a1 40       	sbci	r26, 0x01	; 1
 60a:	a6 95       	lsr	r26
 60c:	8f ef       	ldi	r24, 0xFF	; 255
 60e:	81 1d       	adc	r24, r1
 610:	81 1d       	adc	r24, r1
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
